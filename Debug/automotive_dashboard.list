
automotive_dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000876c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bec  08008bec  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf4  08008bf4  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08008c70  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08008d10  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004714  200001b4  08008db0  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200048c8  08008db0  000248c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f87c  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f12  00000000  00000000  0003fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001948  00000000  00000000  00043970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000017b0  00000000  00000000  000452b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c487  00000000  00000000  00046a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cc4a  00000000  00000000  00072eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e50b  00000000  00000000  0008fb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019e044  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007530  00000000  00000000  0019e094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008954 	.word	0x08008954

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08008954 	.word	0x08008954

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200001d0 	.word	0x200001d0
 8000624:	20000224 	.word	0x20000224

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b09e      	sub	sp, #120	; 0x78
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f001 f874 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f873 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f98f 	bl	8000958 <MX_GPIO_Init>
  MX_ETH_Init();
 800063a:	f000 f8e1 	bl	8000800 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800063e:	f000 f92d 	bl	800089c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000642:	f000 f95b 	bl	80008fc <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000646:	2300      	movs	r3, #0
 8000648:	673b      	str	r3, [r7, #112]	; 0x70
 800064a:	2300      	movs	r3, #0
 800064c:	677b      	str	r3, [r7, #116]	; 0x74
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800064e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fd09 	bl	800506a <osMutexCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <main+0xd0>)
 800065c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of bufferRendering */
  osThreadDef(bufferRendering, bufferRenderingTaskHook, osPriorityNormal, 0, 128);
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <main+0xd4>)
 8000660:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bufferRenderingHandle = osThreadCreate(osThread(bufferRendering), NULL);
 8000672:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f004 fcaa 	bl	8004fd2 <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <main+0xd8>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of speedTask */
  osThreadDef(speedTask, speedTaskHook, osPriorityNormal, 0, 128);
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <main+0xdc>)
 8000686:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  speedTaskHandle = osThreadCreate(osThread(speedTask), NULL);
 8000698:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fc97 	bl	8004fd2 <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <main+0xe0>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of gpsTask */
  osThreadDef(gpsTask, gpsTaskHook, osPriorityNormal, 0, 128);
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <main+0xe4>)
 80006ac:	f107 041c 	add.w	r4, r7, #28
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gpsTaskHandle = osThreadCreate(osThread(gpsTask), NULL);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fc84 	bl	8004fd2 <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a10      	ldr	r2, [pc, #64]	; (8000710 <main+0xe8>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of temperatureTask */
  osThreadDef(temperatureTask, temperatureTaskHook, osPriorityNormal, 0, 128);
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <main+0xec>)
 80006d2:	463c      	mov	r4, r7
 80006d4:	461d      	mov	r5, r3
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  temperatureTaskHandle = osThreadCreate(osThread(temperatureTask), NULL);
 80006e2:	463b      	mov	r3, r7
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fc73 	bl	8004fd2 <osThreadCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <main+0xf0>)
 80006f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f2:	f004 fc67 	bl	8004fc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0xce>
 80006f8:	20000a84 	.word	0x20000a84
 80006fc:	080089a0 	.word	0x080089a0
 8000700:	20000a74 	.word	0x20000a74
 8000704:	080089bc 	.word	0x080089bc
 8000708:	20000a78 	.word	0x20000a78
 800070c:	080089d8 	.word	0x080089d8
 8000710:	20000a7c 	.word	0x20000a7c
 8000714:	080089f4 	.word	0x080089f4
 8000718:	20000a80 	.word	0x20000a80

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f007 f878 	bl	8007820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000740:	f001 ff6c 	bl	800261c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <SystemClock_Config+0xdc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <SystemClock_Config+0xdc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <SystemClock_Config+0xdc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <SystemClock_Config+0xe0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <SystemClock_Config+0xe0>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SystemClock_Config+0xe0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000790:	2360      	movs	r3, #96	; 0x60
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 ff99 	bl	80026dc <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b0:	f000 fc62 	bl	8001078 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b4:	f001 ff42 	bl	800263c <HAL_PWREx_EnableOverDrive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007be:	f000 fc5b 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fa2a 	bl	8002c38 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ea:	f000 fc45 	bl	8001078 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ETH_Init+0x84>)
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <MX_ETH_Init+0x88>)
 8000808:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ETH_Init+0x8c>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ETH_Init+0x8c>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ETH_Init+0x8c>)
 8000818:	22e1      	movs	r2, #225	; 0xe1
 800081a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ETH_Init+0x8c>)
 800081e:	2200      	movs	r2, #0
 8000820:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ETH_Init+0x8c>)
 8000824:	2200      	movs	r2, #0
 8000826:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ETH_Init+0x8c>)
 800082a:	2200      	movs	r2, #0
 800082c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_ETH_Init+0x84>)
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <MX_ETH_Init+0x8c>)
 8000832:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_ETH_Init+0x84>)
 8000836:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800083a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_ETH_Init+0x84>)
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <MX_ETH_Init+0x90>)
 8000840:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_ETH_Init+0x84>)
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_ETH_Init+0x94>)
 8000846:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ETH_Init+0x84>)
 800084a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800084e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_ETH_Init+0x84>)
 8000852:	f001 f895 	bl	8001980 <HAL_ETH_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800085c:	f000 fc0c 	bl	8001078 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000860:	2238      	movs	r2, #56	; 0x38
 8000862:	2100      	movs	r1, #0
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ETH_Init+0x98>)
 8000866:	f006 ffdb 	bl	8007820 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_ETH_Init+0x98>)
 800086c:	2221      	movs	r2, #33	; 0x21
 800086e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_ETH_Init+0x98>)
 8000872:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000876:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_ETH_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000045c 	.word	0x2000045c
 8000888:	40028000 	.word	0x40028000
 800088c:	20000b10 	.word	0x20000b10
 8000890:	20000114 	.word	0x20000114
 8000894:	20000074 	.word	0x20000074
 8000898:	20000424 	.word	0x20000424

0800089c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART3_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART3_UART_Init+0x58>)
 80008e0:	f003 faf8 	bl	8003ed4 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 fbc5 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000050c 	.word	0x2000050c
 80008f8:	40004800 	.word	0x40004800

080008fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000906:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2206      	movs	r2, #6
 800090c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2202      	movs	r2, #2
 8000912:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2202      	movs	r2, #2
 800091e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2201      	movs	r2, #1
 8000924:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2201      	movs	r2, #1
 8000936:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	f001 fd31 	bl	80023a6 <HAL_PCD_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 fb95 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000594 	.word	0x20000594

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a46      	ldr	r2, [pc, #280]	; (8000a8c <MX_GPIO_Init+0x134>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a40      	ldr	r2, [pc, #256]	; (8000a8c <MX_GPIO_Init+0x134>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a3a      	ldr	r2, [pc, #232]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a34      	ldr	r2, [pc, #208]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2e      	ldr	r2, [pc, #184]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_GPIO_Init+0x134>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a04:	4822      	ldr	r0, [pc, #136]	; (8000a90 <MX_GPIO_Init+0x138>)
 8000a06:	f001 fcb5 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4821      	ldr	r0, [pc, #132]	; (8000a94 <MX_GPIO_Init+0x13c>)
 8000a10:	f001 fcb0 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481b      	ldr	r0, [pc, #108]	; (8000a98 <MX_GPIO_Init+0x140>)
 8000a2c:	f001 faf6 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a30:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_GPIO_Init+0x138>)
 8000a4a:	f001 fae7 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_GPIO_Init+0x13c>)
 8000a66:	f001 fad9 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_GPIO_Init+0x13c>)
 8000a7e:	f001 facd 	bl	800201c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	; 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40020800 	.word	0x40020800

08000a9c <bufferRenderingTaskHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_bufferRenderingTaskHook */
void bufferRenderingTaskHook(void const * argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t polling_ticks = pdMS_TO_TICKS(1000);
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	61fb      	str	r3, [r7, #28]
	char speed_string[5];
	char temperature_string[5];
  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(polling_ticks);
 8000aaa:	69f8      	ldr	r0, [r7, #28]
 8000aac:	f005 fbc2 	bl	8006234 <vTaskDelay>
    osMutexWait(myMutex01Handle, osWaitForever);
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <bufferRenderingTaskHook+0x9c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 faef 	bl	800509c <osMutexWait>
    itoa(dash_buffer.speed, speed_string, 10);
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <bufferRenderingTaskHook+0xa0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f107 0114 	add.w	r1, r7, #20
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f006 fe99 	bl	8007800 <itoa>
    itoa(dash_buffer.temperature, temperature_string, 10);
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <bufferRenderingTaskHook+0xa0>)
 8000ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ad4:	f107 010c 	add.w	r1, r7, #12
 8000ad8:	220a      	movs	r2, #10
 8000ada:	4618      	mov	r0, r3
 8000adc:	f006 fe90 	bl	8007800 <itoa>
    osMutexRelease(myMutex01Handle);
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <bufferRenderingTaskHook+0x9c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fb27 	bl	8005138 <osMutexRelease>

    HAL_UART_Transmit(&huart3, speed_string, sizeof(speed_string), 500);
 8000aea:	f107 0114 	add.w	r1, r7, #20
 8000aee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000af2:	2205      	movs	r2, #5
 8000af4:	4812      	ldr	r0, [pc, #72]	; (8000b40 <bufferRenderingTaskHook+0xa4>)
 8000af6:	f003 fa3b 	bl	8003f70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, " km/h\n", sizeof(" km/h\n"), 500);
 8000afa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000afe:	2207      	movs	r2, #7
 8000b00:	4910      	ldr	r1, [pc, #64]	; (8000b44 <bufferRenderingTaskHook+0xa8>)
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <bufferRenderingTaskHook+0xa4>)
 8000b04:	f003 fa34 	bl	8003f70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, temperature_string, sizeof(temperature_string), 500);
 8000b08:	f107 010c 	add.w	r1, r7, #12
 8000b0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b10:	2205      	movs	r2, #5
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <bufferRenderingTaskHook+0xa4>)
 8000b14:	f003 fa2c 	bl	8003f70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, " Kelvin degrees\n", sizeof(" Kelvin degrees\n"), 500);
 8000b18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1c:	2211      	movs	r2, #17
 8000b1e:	490a      	ldr	r1, [pc, #40]	; (8000b48 <bufferRenderingTaskHook+0xac>)
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <bufferRenderingTaskHook+0xa4>)
 8000b22:	f003 fa25 	bl	8003f70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, dash_buffer.GPS, sizeof(dash_buffer.GPS), 500);
 8000b26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <bufferRenderingTaskHook+0xb0>)
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <bufferRenderingTaskHook+0xa4>)
 8000b30:	f003 fa1e 	bl	8003f70 <HAL_UART_Transmit>
  {
 8000b34:	e7b9      	b.n	8000aaa <bufferRenderingTaskHook+0xe>
 8000b36:	bf00      	nop
 8000b38:	20000a84 	.word	0x20000a84
 8000b3c:	20000a88 	.word	0x20000a88
 8000b40:	2000050c 	.word	0x2000050c
 8000b44:	08008a10 	.word	0x08008a10
 8000b48:	08008a18 	.word	0x08008a18
 8000b4c:	20000a8c 	.word	0x20000a8c

08000b50 <speedTaskHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speedTaskHook */
void speedTaskHook(void const * argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speedTaskHook */
	TickType_t polling_ticks = pdMS_TO_TICKS(100);
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	60fb      	str	r3, [r7, #12]
	int speed = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(polling_ticks);
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f005 fb67 	bl	8006234 <vTaskDelay>
    speed = rand() % 200;
 8000b66:	f006 fe63 	bl	8007830 <rand>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <speedTaskHook+0x54>)
 8000b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b72:	1191      	asrs	r1, r2, #6
 8000b74:	17da      	asrs	r2, r3, #31
 8000b76:	1a8a      	subs	r2, r1, r2
 8000b78:	21c8      	movs	r1, #200	; 0xc8
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60bb      	str	r3, [r7, #8]
    osMutexWait(myMutex01Handle, osWaitForever);
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <speedTaskHook+0x58>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fa86 	bl	800509c <osMutexWait>
    dash_buffer.speed = speed;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <speedTaskHook+0x5c>)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	6013      	str	r3, [r2, #0]
    osMutexRelease(myMutex01Handle);
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <speedTaskHook+0x58>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f004 facc 	bl	8005138 <osMutexRelease>
  {
 8000ba0:	e7de      	b.n	8000b60 <speedTaskHook+0x10>
 8000ba2:	bf00      	nop
 8000ba4:	51eb851f 	.word	0x51eb851f
 8000ba8:	20000a84 	.word	0x20000a84
 8000bac:	20000a88 	.word	0x20000a88

08000bb0 <gpsTaskHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gpsTaskHook */
void gpsTaskHook(void const * argument)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b0bf      	sub	sp, #252	; 0xfc
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gpsTaskHook */
	TickType_t polling_ticks = pdMS_TO_TICKS(500);
 8000bb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	char gps_buffer[128];
	int time_counter = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int seconds = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	int minutes = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	int hours = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	char checksum_string[8];

  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(polling_ticks);
 8000bd8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8000bdc:	f005 fb2a 	bl	8006234 <vTaskDelay>
    //Starts code to simulate time
    time_counter++;
 8000be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000be4:	3301      	adds	r3, #1
 8000be6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (time_counter == 2) {
 8000bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d107      	bne.n	8000c02 <gpsTaskHook+0x52>
    	time_counter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		seconds++;
 8000bf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	}

    if (seconds == 60){
 8000c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000c06:	2b3c      	cmp	r3, #60	; 0x3c
 8000c08:	d107      	bne.n	8000c1a <gpsTaskHook+0x6a>
        	seconds = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        	minutes++;
 8000c10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c14:	3301      	adds	r3, #1
 8000c16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    }

    if (minutes == 60){
 8000c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c1e:	2b3c      	cmp	r3, #60	; 0x3c
 8000c20:	d107      	bne.n	8000c32 <gpsTaskHook+0x82>
    	minutes = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    	hours++;
 8000c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    }

    if (hours == 24){
 8000c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c36:	2b18      	cmp	r3, #24
 8000c38:	d102      	bne.n	8000c40 <gpsTaskHook+0x90>
    	hours = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    }
    //Ends code to simulate time

    //Convert time integers into a single time string
    itoa(seconds, seconds_string, 10);
 8000c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c44:	220a      	movs	r2, #10
 8000c46:	4619      	mov	r1, r3
 8000c48:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000c4c:	f006 fdd8 	bl	8007800 <itoa>
    itoa(minutes, minutes_string, 10);
 8000c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c54:	220a      	movs	r2, #10
 8000c56:	4619      	mov	r1, r3
 8000c58:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000c5c:	f006 fdd0 	bl	8007800 <itoa>
    itoa(hours, hours_string, 10);
 8000c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c64:	220a      	movs	r2, #10
 8000c66:	4619      	mov	r1, r3
 8000c68:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8000c6c:	f006 fdc8 	bl	8007800 <itoa>
    strcpy(time_string, ""); //clean time string before reload time values by concatenating
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    strcat(time_string, hours_string);
 8000c76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f006 fe13 	bl	80078ac <strcat>
    strcat(time_string, minutes_string);
 8000c86:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000c8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f006 fe0b 	bl	80078ac <strcat>
    strcat(time_string, seconds_string);
 8000c96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000c9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fe03 	bl	80078ac <strcat>
    strcat(time_string, ",");//add comma for formatting
 8000ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fac8 	bl	8000240 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb8:	4413      	add	r3, r2
 8000cba:	49c2      	ldr	r1, [pc, #776]	; (8000fc4 <gpsTaskHook+0x414>)
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	8013      	strh	r3, [r2, #0]

    //Generate number of satellites random value
    number_of_satellites = rand() % (10 + 1 - 3) + 3;
 8000cc4:	f006 fdb4 	bl	8007830 <rand>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	425a      	negs	r2, r3
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	f002 0207 	and.w	r2, r2, #7
 8000cd4:	bf58      	it	pl
 8000cd6:	4253      	negpl	r3, r2
 8000cd8:	3303      	adds	r3, #3
 8000cda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    strcpy(satellites_string, "");
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    itoa(number_of_satellites, satellites_string, 10);
 8000ce4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce8:	220a      	movs	r2, #10
 8000cea:	4619      	mov	r1, r3
 8000cec:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8000cf0:	f006 fd86 	bl	8007800 <itoa>
    strcat(satellites_string, ",");//add comma for formatting
 8000cf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff faa1 	bl	8000240 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d06:	4413      	add	r3, r2
 8000d08:	49ae      	ldr	r1, [pc, #696]	; (8000fc4 <gpsTaskHook+0x414>)
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	8013      	strh	r3, [r2, #0]

    //Generate Horizontal Dilution of Precision random value
    HDOP1 = rand() % 2;
 8000d12:	f006 fd8d 	bl	8007830 <rand>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	bfb8      	it	lt
 8000d20:	425b      	neglt	r3, r3
 8000d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    itoa(HDOP1, HDOP1_string, 10);
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	220a      	movs	r2, #10
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000d32:	f006 fd65 	bl	8007800 <itoa>
    HDOP2 = rand() % 9;
 8000d36:	f006 fd7b 	bl	8007830 <rand>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4ba2      	ldr	r3, [pc, #648]	; (8000fc8 <gpsTaskHook+0x418>)
 8000d3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d42:	1059      	asrs	r1, r3, #1
 8000d44:	17d3      	asrs	r3, r2, #31
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	460b      	mov	r3, r1
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    itoa(HDOP2, HDOP2_string, 10);
 8000d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d58:	220a      	movs	r2, #10
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8000d60:	f006 fd4e 	bl	8007800 <itoa>

    strcpy(HDOP_string, "");//clear HDOP string
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    strcat(HDOP_string, HDOP1_string);//concatenate integer part
 8000d6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 fd99 	bl	80078ac <strcat>
    strcat(HDOP_string, ".");//concatenate floating point
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa5e 	bl	8000240 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4413      	add	r3, r2
 8000d8e:	498f      	ldr	r1, [pc, #572]	; (8000fcc <gpsTaskHook+0x41c>)
 8000d90:	461a      	mov	r2, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	8013      	strh	r3, [r2, #0]
    strcat(HDOP_string, HDOP2_string);//concatenate decimal part
 8000d98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 fd82 	bl	80078ac <strcat>
    strcat(HDOP_string, ",");//add comma for formatting
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fa47 	bl	8000240 <strlen>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4413      	add	r3, r2
 8000dbc:	4981      	ldr	r1, [pc, #516]	; (8000fc4 <gpsTaskHook+0x414>)
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	8013      	strh	r3, [r2, #0]

    //Generate altitude random value
    altitude1 = rand() % 8848;
 8000dc6:	f006 fd33 	bl	8007830 <rand>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a80      	ldr	r2, [pc, #512]	; (8000fd0 <gpsTaskHook+0x420>)
 8000dce:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd2:	441a      	add	r2, r3
 8000dd4:	1351      	asrs	r1, r2, #13
 8000dd6:	17da      	asrs	r2, r3, #31
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	f242 2190 	movw	r1, #8848	; 0x2290
 8000dde:	fb01 f202 	mul.w	r2, r1, r2
 8000de2:	1a9b      	subs	r3, r3, r2
 8000de4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    itoa(altitude1, altitude1_string, 10);
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	220a      	movs	r2, #10
 8000dee:	4619      	mov	r1, r3
 8000df0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000df4:	f006 fd04 	bl	8007800 <itoa>
    altitude2 = rand() % 9;
 8000df8:	f006 fd1a 	bl	8007830 <rand>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <gpsTaskHook+0x418>)
 8000e00:	fb83 1302 	smull	r1, r3, r3, r2
 8000e04:	1059      	asrs	r1, r3, #1
 8000e06:	17d3      	asrs	r3, r2, #31
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    itoa(altitude2, altitude2_string, 10);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	220a      	movs	r2, #10
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8000e22:	f006 fced 	bl	8007800 <itoa>

    strcpy(altitude_string, "");// clear altitude string
 8000e26:	2300      	movs	r3, #0
 8000e28:	753b      	strb	r3, [r7, #20]
    strcat(altitude_string, altitude1_string);
 8000e2a:	f107 0220 	add.w	r2, r7, #32
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 fd39 	bl	80078ac <strcat>
    strcat(altitude_string, ".");
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f9fe 	bl	8000240 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4413      	add	r3, r2
 8000e4e:	495f      	ldr	r1, [pc, #380]	; (8000fcc <gpsTaskHook+0x41c>)
 8000e50:	461a      	mov	r2, r3
 8000e52:	460b      	mov	r3, r1
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	8013      	strh	r3, [r2, #0]
    strcat(altitude_string, altitude2_string);
 8000e58:	f107 021c 	add.w	r2, r7, #28
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 fd22 	bl	80078ac <strcat>
    strcat(altitude_string, ",");//add comma for formatting
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9e7 	bl	8000240 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4951      	ldr	r1, [pc, #324]	; (8000fc4 <gpsTaskHook+0x414>)
 8000e7e:	461a      	mov	r2, r3
 8000e80:	460b      	mov	r3, r1
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	8013      	strh	r3, [r2, #0]

    //Generate checksum random value
    checksum = rand() % 100;
 8000e86:	f006 fcd3 	bl	8007830 <rand>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <gpsTaskHook+0x424>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1151      	asrs	r1, r2, #5
 8000e94:	17da      	asrs	r2, r3, #31
 8000e96:	1a8a      	subs	r2, r1, r2
 8000e98:	2164      	movs	r1, #100	; 0x64
 8000e9a:	fb01 f202 	mul.w	r2, r1, r2
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    itoa(checksum, checksum_string, 10);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000eb0:	f006 fca6 	bl	8007800 <itoa>

    //Prepare GPS buffer data before requesting shared buffer to Mutex1
    strcpy(gps_buffer, ""); //clear GPS string
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    strcat(gps_buffer, "$GPGGA,"); //concatenate GPS sentence format
 8000eba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff f9be 	bl	8000240 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ecc:	4413      	add	r3, r2
 8000ece:	4942      	ldr	r1, [pc, #264]	; (8000fd8 <gpsTaskHook+0x428>)
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	cb03      	ldmia	r3!, {r0, r1}
 8000ed6:	6010      	str	r0, [r2, #0]
 8000ed8:	6051      	str	r1, [r2, #4]
    strcat(gps_buffer, time_string); //concatenate simulate time
 8000eda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 fce1 	bl	80078ac <strcat>
    strcat(gps_buffer, "4807.038,N,"); //concatenate N position fixed value
 8000eea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f9a6 	bl	8000240 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000efc:	4413      	add	r3, r2
 8000efe:	4a37      	ldr	r2, [pc, #220]	; (8000fdc <gpsTaskHook+0x42c>)
 8000f00:	461c      	mov	r4, r3
 8000f02:	4613      	mov	r3, r2
 8000f04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f06:	6020      	str	r0, [r4, #0]
 8000f08:	6061      	str	r1, [r4, #4]
 8000f0a:	60a2      	str	r2, [r4, #8]
    strcat(gps_buffer, "01131.000,E,"); // concatenate E position fixed value
 8000f0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f995 	bl	8000240 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <gpsTaskHook+0x430>)
 8000f22:	461c      	mov	r4, r3
 8000f24:	4613      	mov	r3, r2
 8000f26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f28:	6020      	str	r0, [r4, #0]
 8000f2a:	6061      	str	r1, [r4, #4]
 8000f2c:	60a2      	str	r2, [r4, #8]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	7323      	strb	r3, [r4, #12]
    strcat(gps_buffer, "1,"); //concatenate fix quality value
 8000f32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f982 	bl	8000240 <strlen>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f44:	4413      	add	r3, r2
 8000f46:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <gpsTaskHook+0x434>)
 8000f48:	8811      	ldrh	r1, [r2, #0]
 8000f4a:	7892      	ldrb	r2, [r2, #2]
 8000f4c:	8019      	strh	r1, [r3, #0]
 8000f4e:	709a      	strb	r2, [r3, #2]
    strcat(gps_buffer, satellites_string);//concatenate number of satellites
 8000f50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fca6 	bl	80078ac <strcat>
    //strcat(gps_buffer, HDOP_string);//concatenate Horizontal Dilution of Precision value
    strcat(gps_buffer, altitude_string);//concatenate altitude value in meters
 8000f60:	f107 0214 	add.w	r2, r7, #20
 8000f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fc9e 	bl	80078ac <strcat>
    strcat(gps_buffer, checksum_string);//concatenate checksum value
 8000f70:	f107 020c 	add.w	r2, r7, #12
 8000f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fc96 	bl	80078ac <strcat>
    strcat(gps_buffer, "\n");//add new line special character
 8000f80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f95b 	bl	8000240 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f92:	4413      	add	r3, r2
 8000f94:	4914      	ldr	r1, [pc, #80]	; (8000fe8 <gpsTaskHook+0x438>)
 8000f96:	461a      	mov	r2, r3
 8000f98:	460b      	mov	r3, r1
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	8013      	strh	r3, [r2, #0]

    //After preparing all the necessary data, task will request dash buffer by Mutex1 to copy the updated GPS data
    osMutexWait(myMutex01Handle, osWaitForever);
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <gpsTaskHook+0x43c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 f878 	bl	800509c <osMutexWait>
    strcpy(dash_buffer.GPS, gps_buffer);
 8000fac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <gpsTaskHook+0x440>)
 8000fb4:	f006 fc89 	bl	80078ca <strcpy>
    osMutexRelease(myMutex01Handle);
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <gpsTaskHook+0x43c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 f8bb 	bl	8005138 <osMutexRelease>
  {
 8000fc2:	e609      	b.n	8000bd8 <gpsTaskHook+0x28>
 8000fc4:	08008a2c 	.word	0x08008a2c
 8000fc8:	38e38e39 	.word	0x38e38e39
 8000fcc:	08008a30 	.word	0x08008a30
 8000fd0:	ed05179d 	.word	0xed05179d
 8000fd4:	51eb851f 	.word	0x51eb851f
 8000fd8:	08008a34 	.word	0x08008a34
 8000fdc:	08008a3c 	.word	0x08008a3c
 8000fe0:	08008a48 	.word	0x08008a48
 8000fe4:	08008a58 	.word	0x08008a58
 8000fe8:	08008a5c 	.word	0x08008a5c
 8000fec:	20000a84 	.word	0x20000a84
 8000ff0:	20000a8c 	.word	0x20000a8c

08000ff4 <temperatureTaskHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temperatureTaskHook */
void temperatureTaskHook(void const * argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTaskHook */
	TickType_t polling_ticks = pdMS_TO_TICKS(200);
 8000ffc:	23c8      	movs	r3, #200	; 0xc8
 8000ffe:	60fb      	str	r3, [r7, #12]
	int temperature;
  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(polling_ticks);
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f005 f917 	bl	8006234 <vTaskDelay>
    temperature = rand() % 400;
 8001006:	f006 fc13 	bl	8007830 <rand>
 800100a:	4603      	mov	r3, r0
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <temperatureTaskHook+0x54>)
 800100e:	fb82 1203 	smull	r1, r2, r2, r3
 8001012:	11d1      	asrs	r1, r2, #7
 8001014:	17da      	asrs	r2, r3, #31
 8001016:	1a8a      	subs	r2, r1, r2
 8001018:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800101c:	fb01 f202 	mul.w	r2, r1, r2
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
    osMutexWait(myMutex01Handle, osWaitForever);
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <temperatureTaskHook+0x58>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	4618      	mov	r0, r3
 800102e:	f004 f835 	bl	800509c <osMutexWait>
    dash_buffer.temperature = temperature;
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <temperatureTaskHook+0x5c>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    osMutexRelease(myMutex01Handle);
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <temperatureTaskHook+0x58>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f004 f87a 	bl	8005138 <osMutexRelease>
  {
 8001044:	e7dc      	b.n	8001000 <temperatureTaskHook+0xc>
 8001046:	bf00      	nop
 8001048:	51eb851f 	.word	0x51eb851f
 800104c:	20000a84 	.word	0x20000a84
 8001050:	20000a88 	.word	0x20000a88

08001054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001066:	f000 fb65 	bl	8001734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40010000 	.word	0x40010000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_MspInit+0x4c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	210f      	movs	r1, #15
 80010be:	f06f 0001 	mvn.w	r0, #1
 80010c2:	f000 fc33 	bl	800192c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a4e      	ldr	r2, [pc, #312]	; (800122c <HAL_ETH_MspInit+0x158>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 8096 	bne.w	8001224 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010f8:	4b4d      	ldr	r3, [pc, #308]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 80010fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	623b      	str	r3, [r7, #32]
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a46      	ldr	r2, [pc, #280]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b44      	ldr	r3, [pc, #272]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a40      	ldr	r2, [pc, #256]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800112e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b35      	ldr	r3, [pc, #212]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a34      	ldr	r2, [pc, #208]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a28      	ldr	r2, [pc, #160]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 800118e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_ETH_MspInit+0x15c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011a0:	2332      	movs	r3, #50	; 0x32
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b0:	230b      	movs	r3, #11
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	481e      	ldr	r0, [pc, #120]	; (8001234 <HAL_ETH_MspInit+0x160>)
 80011bc:	f000 ff2e 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011c0:	2386      	movs	r3, #134	; 0x86
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d0:	230b      	movs	r3, #11
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <HAL_ETH_MspInit+0x164>)
 80011dc:	f000 ff1e 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f2:	230b      	movs	r3, #11
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <HAL_ETH_MspInit+0x168>)
 80011fe:	f000 ff0d 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001202:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001214:	230b      	movs	r3, #11
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <HAL_ETH_MspInit+0x16c>)
 8001220:	f000 fefc 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40028000 	.word	0x40028000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40021800 	.word	0x40021800

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ae      	sub	sp, #184	; 0xb8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2290      	movs	r2, #144	; 0x90
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 fadb 	bl	8007820 <memset>
  if(huart->Instance==USART3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_UART_MspInit+0xb4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d13c      	bne.n	80012ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800127a:	2300      	movs	r3, #0
 800127c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f001 ff30 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128e:	f7ff fef3 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012dc:	2307      	movs	r3, #7
 80012de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0xbc>)
 80012ea:	f000 fe97 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	37b8      	adds	r7, #184	; 0xb8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40004800 	.word	0x40004800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020c00 	.word	0x40020c00

08001304 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0ae      	sub	sp, #184	; 0xb8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2290      	movs	r2, #144	; 0x90
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f006 fa7b 	bl	8007820 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001332:	d159      	bne.n	80013e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001338:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fecf 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001350:	f7ff fe92 	bl	8001078 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800136c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001386:	230a      	movs	r3, #10
 8001388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001390:	4619      	mov	r1, r3
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <HAL_PCD_MspInit+0xf0>)
 8001394:	f000 fe42 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_PCD_MspInit+0xf0>)
 80013b4:	f000 fe32 	bl	800201c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 80013ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 80013be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c2:	6353      	str	r3, [r2, #52]	; 0x34
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 80013d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 80013d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013da:	6453      	str	r3, [r2, #68]	; 0x44
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_PCD_MspInit+0xec>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	37b8      	adds	r7, #184	; 0xb8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000

080013f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_InitTick+0xcc>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <HAL_InitTick+0xcc>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6453      	str	r3, [r2, #68]	; 0x44
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_InitTick+0xcc>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fe2a 	bl	8003084 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001430:	f001 fe14 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 8001434:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_InitTick+0xd0>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	3b01      	subs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_InitTick+0xd4>)
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_InitTick+0xd8>)
 8001448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_InitTick+0xd4>)
 800144c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001450:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_InitTick+0xd4>)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_InitTick+0xd4>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_InitTick+0xd4>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_InitTick+0xd4>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800146a:	4818      	ldr	r0, [pc, #96]	; (80014cc <HAL_InitTick+0xd4>)
 800146c:	f002 fa64 	bl	8003938 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11b      	bne.n	80014b6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800147e:	4813      	ldr	r0, [pc, #76]	; (80014cc <HAL_InitTick+0xd4>)
 8001480:	f002 fabc 	bl	80039fc <HAL_TIM_Base_Start_IT>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800148a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800148e:	2b00      	cmp	r3, #0
 8001490:	d111      	bne.n	80014b6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001492:	2019      	movs	r0, #25
 8001494:	f000 fa66 	bl	8001964 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d808      	bhi.n	80014b0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800149e:	2200      	movs	r2, #0
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	2019      	movs	r0, #25
 80014a4:	f000 fa42 	bl	800192c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_InitTick+0xdc>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e002      	b.n	80014b6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	20000b18 	.word	0x20000b18
 80014d0:	40010000 	.word	0x40010000
 80014d4:	20000004 	.word	0x20000004

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800150a:	f002 faef 	bl	8003aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000b18 	.word	0x20000b18

08001518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_kill>:

int _kill(int pid, int sig)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001532:	f006 f923 	bl	800777c <__errno>
 8001536:	4603      	mov	r3, r0
 8001538:	2216      	movs	r2, #22
 800153a:	601a      	str	r2, [r3, #0]
  return -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_exit>:

void _exit (int status)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffe7 	bl	8001528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800155a:	e7fe      	b.n	800155a <_exit+0x12>

0800155c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e00a      	b.n	8001584 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156e:	f3af 8000 	nop.w
 8001572:	4601      	mov	r1, r0
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	b2ca      	uxtb	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf0      	blt.n	800156e <_read+0x12>
  }

  return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e009      	b.n	80015bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf1      	blt.n	80015a8 <_write+0x12>
  }
  return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_close>:

int _close(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f6:	605a      	str	r2, [r3, #4]
  return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_isatty>:

int _isatty(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f006 f888 	bl	800777c <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20080000 	.word	0x20080000
 8001698:	00000400 	.word	0x00000400
 800169c:	20000b64 	.word	0x20000b64
 80016a0:	200048c8 	.word	0x200048c8

080016a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016cc:	f7ff ffea 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	; (8001708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	; (8001714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f006 f847 	bl	8007788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7fe ff95 	bl	8000628 <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800170c:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 8001710:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001714:	200048c8 	.word	0x200048c8

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>

0800171a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f000 f8f9 	bl	8001916 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001724:	200f      	movs	r0, #15
 8001726:	f7ff fe67 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fcab 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000b68 	.word	0x20000b68

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000b68 	.word	0x20000b68

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <__NVIC_SetPriorityGrouping+0x40>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x40>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	05fa0000 	.word	0x05fa0000

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff4c 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193e:	f7ff ff61 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001942:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	6978      	ldr	r0, [r7, #20]
 800194a:	f7ff ffb1 	bl	80018b0 <NVIC_EncodePriority>
 800194e:	4602      	mov	r2, r0
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff80 	bl	800185c <__NVIC_SetPriority>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff54 	bl	8001820 <__NVIC_EnableIRQ>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e086      	b.n	8001aa0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001998:	2b00      	cmp	r3, #0
 800199a:	d106      	bne.n	80019aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2220      	movs	r2, #32
 80019a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fb95 	bl	80010d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_ETH_Init+0x128>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a3e      	ldr	r2, [pc, #248]	; (8001aa8 <HAL_ETH_Init+0x128>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_ETH_Init+0x128>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_ETH_Init+0x12c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a39      	ldr	r2, [pc, #228]	; (8001aac <HAL_ETH_Init+0x12c>)
 80019c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_ETH_Init+0x12c>)
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4935      	ldr	r1, [pc, #212]	; (8001aac <HAL_ETH_Init+0x12c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_ETH_Init+0x12c>)
 80019de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f8:	f7ff feb0 	bl	800175c <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019fe:	e011      	b.n	8001a24 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a00:	f7ff feac 	bl	800175c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a0e:	d909      	bls.n	8001a24 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2204      	movs	r2, #4
 8001a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	22e0      	movs	r2, #224	; 0xe0
 8001a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e03d      	b.n	8001aa0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e4      	bne.n	8001a00 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f97a 	bl	8001d30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fa25 	bl	8001e8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fa7b 	bl	8001f3e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f9e3 	bl	8001e1c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_ETH_Init+0x130>)
 8001a74:	430b      	orrs	r3, r1
 8001a76:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001a8a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2210      	movs	r2, #16
 8001a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	00020060 	.word	0x00020060

08001ab4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <ETH_SetMACConfig+0x164>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7b9b      	ldrb	r3, [r3, #14]
 8001ad2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	7c12      	ldrb	r2, [r2, #16]
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d102      	bne.n	8001ae2 <ETH_SetMACConfig+0x2e>
 8001adc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ae0:	e000      	b.n	8001ae4 <ETH_SetMACConfig+0x30>
 8001ae2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ae4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	7c52      	ldrb	r2, [r2, #17]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetMACConfig+0x40>
 8001aee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001af2:	e000      	b.n	8001af6 <ETH_SetMACConfig+0x42>
 8001af4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001af6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001afc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7fdb      	ldrb	r3, [r3, #31]
 8001b02:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b04:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	7f92      	ldrb	r2, [r2, #30]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d102      	bne.n	8001b1a <ETH_SetMACConfig+0x66>
 8001b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b18:	e000      	b.n	8001b1c <ETH_SetMACConfig+0x68>
 8001b1a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
 8001b22:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b24:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d102      	bne.n	8001b44 <ETH_SetMACConfig+0x90>
 8001b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b42:	e000      	b.n	8001b46 <ETH_SetMACConfig+0x92>
 8001b44:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	7bdb      	ldrb	r3, [r3, #15]
 8001b4c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b4e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fdfc 	bl	8001774 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d101      	bne.n	8001baa <ETH_SetMACConfig+0xf6>
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0xf8>
 8001baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001bb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d101      	bne.n	8001bc2 <ETH_SetMACConfig+0x10e>
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	e000      	b.n	8001bc4 <ETH_SetMACConfig+0x110>
 8001bc2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001bc4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001bcc:	2a01      	cmp	r2, #1
 8001bce:	d101      	bne.n	8001bd4 <ETH_SetMACConfig+0x120>
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	e000      	b.n	8001bd6 <ETH_SetMACConfig+0x122>
 8001bd4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001bde:	2a01      	cmp	r2, #1
 8001be0:	d101      	bne.n	8001be6 <ETH_SetMACConfig+0x132>
 8001be2:	2202      	movs	r2, #2
 8001be4:	e000      	b.n	8001be8 <ETH_SetMACConfig+0x134>
 8001be6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff fdb7 	bl	8001774 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	fd20810f 	.word	0xfd20810f

08001c1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <ETH_SetDMAConfig+0x110>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	7b1b      	ldrb	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <ETH_SetDMAConfig+0x2c>
 8001c42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c46:	e000      	b.n	8001c4a <ETH_SetDMAConfig+0x2e>
 8001c48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	7b5b      	ldrb	r3, [r3, #13]
 8001c4e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c50:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	7f52      	ldrb	r2, [r2, #29]
 8001c56:	2a00      	cmp	r2, #0
 8001c58:	d102      	bne.n	8001c60 <ETH_SetDMAConfig+0x44>
 8001c5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c5e:	e000      	b.n	8001c62 <ETH_SetDMAConfig+0x46>
 8001c60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7b9b      	ldrb	r3, [r3, #14]
 8001c68:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c6a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	7f1b      	ldrb	r3, [r3, #28]
 8001c76:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	7f9b      	ldrb	r3, [r3, #30]
 8001c7e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c80:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff fd5e 	bl	8001774 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	791b      	ldrb	r3, [r3, #4]
 8001cca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cd0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001cd6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cdc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ce4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ce6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cf4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff fd2f 	bl	8001774 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	f8de3f23 	.word	0xf8de3f23

08001d30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0a6      	sub	sp, #152	; 0x98
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d72:	2300      	movs	r3, #0
 8001d74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001daa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fe7f 	bl	8001ab4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001de2:	2301      	movs	r3, #1
 8001de4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001df0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff05 	bl	8001c1c <ETH_SetDMAConfig>
}
 8001e12:	bf00      	nop
 8001e14:	3798      	adds	r7, #152	; 0x98
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3305      	adds	r3, #5
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	3204      	adds	r2, #4
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <ETH_MACAddressConfig+0x68>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3303      	adds	r3, #3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	061a      	lsls	r2, r3, #24
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3302      	adds	r3, #2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	4313      	orrs	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <ETH_MACAddressConfig+0x6c>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	6013      	str	r3, [r2, #0]
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40028040 	.word	0x40028040
 8001e88:	40028044 	.word	0x40028044

08001e8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e03e      	b.n	8001f18 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68d9      	ldr	r1, [r3, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	3206      	adds	r2, #6
 8001ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d80c      	bhi.n	8001efc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68d9      	ldr	r1, [r3, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	e004      	b.n	8001f06 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d9bd      	bls.n	8001e9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	611a      	str	r2, [r3, #16]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e048      	b.n	8001fde <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6919      	ldr	r1, [r3, #16]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f88:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	3212      	adds	r2, #18
 8001faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d80c      	bhi.n	8001fce <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	e004      	b.n	8001fd8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d9b3      	bls.n	8001f4c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e175      	b.n	8002328 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8164 	bne.w	8002322 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_GPIO_Init+0x56>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80be 	beq.w	8002322 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021be:	4a61      	ldr	r2, [pc, #388]	; (8002344 <HAL_GPIO_Init+0x328>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_GPIO_Init+0x32c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d037      	beq.n	800225a <HAL_GPIO_Init+0x23e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_GPIO_Init+0x330>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_GPIO_Init+0x23a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_GPIO_Init+0x334>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <HAL_GPIO_Init+0x236>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a55      	ldr	r2, [pc, #340]	; (8002354 <HAL_GPIO_Init+0x338>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d025      	beq.n	800224e <HAL_GPIO_Init+0x232>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a54      	ldr	r2, [pc, #336]	; (8002358 <HAL_GPIO_Init+0x33c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <HAL_GPIO_Init+0x22e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a53      	ldr	r2, [pc, #332]	; (800235c <HAL_GPIO_Init+0x340>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x22a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_GPIO_Init+0x344>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x226>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_GPIO_Init+0x348>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x222>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a50      	ldr	r2, [pc, #320]	; (8002368 <HAL_GPIO_Init+0x34c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x21e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4f      	ldr	r2, [pc, #316]	; (800236c <HAL_GPIO_Init+0x350>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x21a>
 8002232:	2309      	movs	r3, #9
 8002234:	e012      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002236:	230a      	movs	r3, #10
 8002238:	e010      	b.n	800225c <HAL_GPIO_Init+0x240>
 800223a:	2308      	movs	r3, #8
 800223c:	e00e      	b.n	800225c <HAL_GPIO_Init+0x240>
 800223e:	2307      	movs	r3, #7
 8002240:	e00c      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002242:	2306      	movs	r3, #6
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002246:	2305      	movs	r3, #5
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x240>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x240>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x240>
 800225a:	2300      	movs	r3, #0
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x328>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_GPIO_Init+0x354>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a34      	ldr	r2, [pc, #208]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_GPIO_Init+0x354>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	f67f ae86 	bls.w	800203c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40021400 	.word	0x40021400
 8002360:	40021800 	.word	0x40021800
 8002364:	40021c00 	.word	0x40021c00
 8002368:	40022000 	.word	0x40022000
 800236c:	40022400 	.word	0x40022400
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e108      	b.n	80025ca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe ff96 	bl	8001304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d102      	bne.n	80023ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fb20 	bl	8004a38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7c1a      	ldrb	r2, [r3, #16]
 8002400:	f88d 2000 	strb.w	r2, [sp]
 8002404:	3304      	adds	r3, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	f002 fabc 	bl	8004984 <USB_CoreInit>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0d5      	b.n	80025ca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fb18 	bl	8004a5a <USB_SetCurrentMode>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0c6      	b.n	80025ca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e04a      	b.n	80024d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3315      	adds	r3, #21
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3314      	adds	r3, #20
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	b298      	uxth	r0, r3
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	332e      	adds	r3, #46	; 0x2e
 800247e:	4602      	mov	r2, r0
 8002480:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3318      	adds	r3, #24
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	331c      	adds	r3, #28
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3320      	adds	r3, #32
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3324      	adds	r3, #36	; 0x24
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3af      	bcc.n	8002442 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e044      	b.n	8002572 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f203 2355 	addw	r3, r3, #597	; 0x255
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	791b      	ldrb	r3, [r3, #4]
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3b5      	bcc.n	80024e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7c1a      	ldrb	r2, [r3, #16]
 8002584:	f88d 2000 	strb.w	r2, [sp]
 8002588:	3304      	adds	r3, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	f002 fab2 	bl	8004af4 <USB_DevInit>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e013      	b.n	80025ca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f80b 	bl	80025d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fc6d 	bl	8004ea2 <USB_DevDisconnect>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_PCDEx_ActivateLPM+0x44>)
 8002604:	4313      	orrs	r3, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	10000003 	.word	0x10000003

0800261c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40007000 	.word	0x40007000

0800263c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800266a:	f7ff f877 	bl	800175c <HAL_GetTick>
 800266e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002670:	e009      	b.n	8002686 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002672:	f7ff f873 	bl	800175c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002680:	d901      	bls.n	8002686 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e022      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d1ee      	bne.n	8002672 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a0:	f7ff f85c 	bl	800175c <HAL_GetTick>
 80026a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026a6:	e009      	b.n	80026bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026a8:	f7ff f858 	bl	800175c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b6:	d901      	bls.n	80026bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e007      	b.n	80026cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c8:	d1ee      	bne.n	80026a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e29b      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b96      	ldr	r3, [pc, #600]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270c:	4b93      	ldr	r3, [pc, #588]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x62>
 8002718:	4b90      	ldr	r3, [pc, #576]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b8d      	ldr	r3, [pc, #564]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x130>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e275      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x7a>
 8002748:	4b84      	ldr	r3, [pc, #528]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a83      	ldr	r2, [pc, #524]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x9c>
 800275e:	4b7f      	ldr	r3, [pc, #508]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7e      	ldr	r2, [pc, #504]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b7c      	ldr	r3, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7b      	ldr	r2, [pc, #492]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xc0>
 8002782:	4b76      	ldr	r3, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a75      	ldr	r2, [pc, #468]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a72      	ldr	r2, [pc, #456]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd8>
 800279c:	4b6f      	ldr	r3, [pc, #444]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b6c      	ldr	r3, [pc, #432]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6b      	ldr	r2, [pc, #428]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe ffce 	bl	800175c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe ffca 	bl	800175c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e229      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe ffba 	bl	800175c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe ffb6 	bl	800175c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e215      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x110>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d069      	beq.n	80028ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x190>
 8002832:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x17a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1e9      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	493d      	ldr	r1, [pc, #244]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e040      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a38      	ldr	r2, [pc, #224]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe ff6c 	bl	800175c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002888:	f7fe ff68 	bl	800175c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1c7      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289a:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4929      	ldr	r1, [pc, #164]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
 80028ba:	e018      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a26      	ldr	r2, [pc, #152]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe ff48 	bl	800175c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d0:	f7fe ff44 	bl	800175c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1a3      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d038      	beq.n	800296c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d019      	beq.n	8002936 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe ff25 	bl	800175c <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002916:	f7fe ff21 	bl	800175c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e180      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x23a>
 8002934:	e01a      	b.n	800296c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_OscConfig+0x280>)
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <HAL_RCC_OscConfig+0x280>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe ff0b 	bl	800175c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe ff07 	bl	800175c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d903      	bls.n	8002960 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e166      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
 800295c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a4 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b89      	ldr	r3, [pc, #548]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a88      	ldr	r2, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b86      	ldr	r3, [pc, #536]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a2:	4b83      	ldr	r3, [pc, #524]	; (8002bb0 <HAL_RCC_OscConfig+0x4d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029ae:	4b80      	ldr	r3, [pc, #512]	; (8002bb0 <HAL_RCC_OscConfig+0x4d4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7f      	ldr	r2, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x4d4>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fecf 	bl	800175c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe fecb 	bl	800175c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e12a      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d4:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x4d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x31a>
 80029e8:	4b70      	ldr	r3, [pc, #448]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a6f      	ldr	r2, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	e02d      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x33c>
 80029fe:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a6a      	ldr	r2, [pc, #424]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	4b68      	ldr	r3, [pc, #416]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a67      	ldr	r2, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x35e>
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a5e      	ldr	r2, [pc, #376]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
 8002a3a:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a5b      	ldr	r2, [pc, #364]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
 8002a46:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe7f 	bl	800175c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fe7b 	bl	800175c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0d8      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCC_OscConfig+0x386>
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fe69 	bl	800175c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fe65 	bl	800175c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0c2      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80ae 	beq.w	8002c28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d06d      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d14b      	bne.n	8002b78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a31      	ldr	r2, [pc, #196]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fe36 	bl	800175c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fe32 	bl	800175c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e091      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	071b      	lsls	r3, r3, #28
 8002b3e:	491b      	ldr	r1, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fe04 	bl	800175c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fe00 	bl	800175c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e05f      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x47c>
 8002b76:	e057      	b.n	8002c28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fdea 	bl	800175c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe fde6 	bl	800175c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e045      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4b0>
 8002baa:	e03d      	b.n	8002c28 <HAL_RCC_OscConfig+0x54c>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <HAL_RCC_OscConfig+0x558>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d030      	beq.n	8002c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d129      	bne.n	8002c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d122      	bne.n	8002c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d119      	bne.n	8002c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d10f      	bne.n	8002c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0d0      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	4965      	ldr	r1, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d040      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e073      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06b      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4936      	ldr	r1, [pc, #216]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fd16 	bl	800175c <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fe fd12 	bl	800175c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e053      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d210      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 020f 	bic.w	r2, r3, #15
 8002d72:	4922      	ldr	r1, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1d0>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1d4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb04 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08008a68 	.word	0x08008a68
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b094      	sub	sp, #80	; 0x50
 8002e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	2300      	movs	r3, #0
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e28:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x40>
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	f200 80e1 	bhi.w	8002ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e42:	e0db      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e48:	e0db      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e4e:	e0d8      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e82:	4622      	mov	r2, r4
 8002e84:	462b      	mov	r3, r5
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	6139      	str	r1, [r7, #16]
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ec8:	4659      	mov	r1, fp
 8002eca:	eb63 0901 	sbc.w	r9, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ee2:	4690      	mov	r8, r2
 8002ee4:	4699      	mov	r9, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	eb18 0303 	adds.w	r3, r8, r3
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	eb49 0303 	adc.w	r3, r9, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f02:	4629      	mov	r1, r5
 8002f04:	024b      	lsls	r3, r1, #9
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	024a      	lsls	r2, r1, #9
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	2200      	movs	r2, #0
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f20:	f7fd f9e6 	bl	80002f0 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f2c:	e058      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	2200      	movs	r2, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	4611      	mov	r1, r2
 8002f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	f04f 0000 	mov.w	r0, #0
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	0159      	lsls	r1, r3, #5
 8002f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f5a:	0150      	lsls	r0, r2, #5
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4641      	mov	r1, r8
 8002f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f66:	4649      	mov	r1, r9
 8002f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f80:	ebb2 040a 	subs.w	r4, r2, sl
 8002f84:	eb63 050b 	sbc.w	r5, r3, fp
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	00eb      	lsls	r3, r5, #3
 8002f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f96:	00e2      	lsls	r2, r4, #3
 8002f98:	4614      	mov	r4, r2
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	18e3      	adds	r3, r4, r3
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	eb45 0303 	adc.w	r3, r5, r3
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	028b      	lsls	r3, r1, #10
 8002fba:	4621      	mov	r1, r4
 8002fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	028a      	lsls	r2, r1, #10
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	61fa      	str	r2, [r7, #28]
 8002fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd4:	f7fd f98c 	bl	80002f0 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	3301      	adds	r3, #1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003004:	4618      	mov	r0, r3
 8003006:	3750      	adds	r7, #80	; 0x50
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCC_GetHCLKFreq+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003038:	f7ff fff0 	bl	800301c <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	0a9b      	lsrs	r3, r3, #10
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	08008a78 	.word	0x08008a78

0800305c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003060:	f7ff ffdc 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	0b5b      	lsrs	r3, r3, #13
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	08008a78 	.word	0x08008a78

08003084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	220f      	movs	r2, #15
 8003092:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0203 	and.w	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCC_GetClockConfig+0x5c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_GetClockConfig+0x5c>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_RCC_GetClockConfig+0x60>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 020f 	and.w	r2, r3, #15
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003110:	4b69      	ldr	r3, [pc, #420]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a68      	ldr	r2, [pc, #416]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	4b66      	ldr	r3, [pc, #408]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003124:	4964      	ldr	r1, [pc, #400]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003132:	2301      	movs	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d017      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003142:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	4959      	ldr	r1, [pc, #356]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d017      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800317e:	4b4e      	ldr	r3, [pc, #312]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	494a      	ldr	r1, [pc, #296]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 808b 	beq.w	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	4a39      	ldr	r2, [pc, #228]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6413      	str	r3, [r2, #64]	; 0x40
 80031d8:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fe fab4 	bl	800175c <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7fe fab0 	bl	800175c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e38f      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800320a:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d035      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d02e      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d114      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fa78 	bl	800175c <HAL_GetTick>
 800326c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe fa74 	bl	800175c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e351      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ee      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329e:	d111      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ae:	400b      	ands	r3, r1
 80032b0:	4901      	ldr	r1, [pc, #4]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
 80032b6:	e00b      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40007000 	.word	0x40007000
 80032c0:	0ffffcff 	.word	0x0ffffcff
 80032c4:	4bac      	ldr	r3, [pc, #688]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4aab      	ldr	r2, [pc, #684]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032ce:	6093      	str	r3, [r2, #8]
 80032d0:	4ba9      	ldr	r3, [pc, #676]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	49a6      	ldr	r1, [pc, #664]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032ee:	4ba2      	ldr	r3, [pc, #648]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f4:	4aa0      	ldr	r2, [pc, #640]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032fe:	4b9e      	ldr	r3, [pc, #632]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003300:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	499b      	ldr	r1, [pc, #620]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331c:	4b96      	ldr	r3, [pc, #600]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332a:	4993      	ldr	r1, [pc, #588]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800333e:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334c:	498a      	ldr	r1, [pc, #552]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003360:	4b85      	ldr	r3, [pc, #532]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336e:	4982      	ldr	r1, [pc, #520]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4979      	ldr	r1, [pc, #484]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a4:	4b74      	ldr	r3, [pc, #464]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	4971      	ldr	r1, [pc, #452]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f023 020c 	bic.w	r2, r3, #12
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d4:	4968      	ldr	r1, [pc, #416]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e8:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	4960      	ldr	r1, [pc, #384]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800340a:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	4957      	ldr	r1, [pc, #348]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800342c:	4b52      	ldr	r3, [pc, #328]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	494f      	ldr	r1, [pc, #316]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800344e:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4946      	ldr	r1, [pc, #280]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	493e      	ldr	r1, [pc, #248]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	4935      	ldr	r1, [pc, #212]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c2:	492d      	ldr	r1, [pc, #180]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d011      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e4:	4924      	ldr	r1, [pc, #144]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	4914      	ldr	r1, [pc, #80]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003548:	490b      	ldr	r1, [pc, #44]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00f      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356c:	4902      	ldr	r1, [pc, #8]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003588:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	4986      	ldr	r1, [pc, #536]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035bc:	497d      	ldr	r1, [pc, #500]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d006      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80d6 	beq.w	8003784 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a75      	ldr	r2, [pc, #468]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e4:	f7fe f8ba 	bl	800175c <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ec:	f7fe f8b6 	bl	800175c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e195      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035fe:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d021      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11d      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800362c:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800362e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003632:	0e1b      	lsrs	r3, r3, #24
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	019a      	lsls	r2, r3, #6
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	071b      	lsls	r3, r3, #28
 8003652:	4958      	ldr	r1, [pc, #352]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02e      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003684:	d129      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003686:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003694:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369a:	0f1b      	lsrs	r3, r3, #28
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	019a      	lsls	r2, r3, #6
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	061b      	lsls	r3, r3, #24
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	071b      	lsls	r3, r3, #28
 80036ba:	493e      	ldr	r1, [pc, #248]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036c2:	4b3c      	ldr	r3, [pc, #240]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c8:	f023 021f 	bic.w	r2, r3, #31
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	3b01      	subs	r3, #1
 80036d2:	4938      	ldr	r1, [pc, #224]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01d      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ec:	0e1b      	lsrs	r3, r3, #24
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036f4:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	0f1b      	lsrs	r3, r3, #28
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	019a      	lsls	r2, r3, #6
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	431a      	orrs	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	431a      	orrs	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	071b      	lsls	r3, r3, #28
 800371a:	4926      	ldr	r1, [pc, #152]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	019a      	lsls	r2, r3, #6
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	071b      	lsls	r3, r3, #28
 800374a:	491a      	ldr	r1, [pc, #104]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fd fffd 	bl	800175c <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003766:	f7fd fff9 	bl	800175c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0d8      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 80ce 	bne.w	8003928 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003798:	f7fd ffe0 	bl	800175c <HAL_GetTick>
 800379c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800379e:	e00b      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037a0:	f7fd ffdc 	bl	800175c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d904      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0bb      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037b8:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c4:	d0ec      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02e      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d12a      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ee:	4b51      	ldr	r3, [pc, #324]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037fc:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	0f1b      	lsrs	r3, r3, #28
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	019a      	lsls	r2, r3, #6
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	071b      	lsls	r3, r3, #28
 8003822:	4944      	ldr	r1, [pc, #272]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800382a:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800382c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003830:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	3b01      	subs	r3, #1
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	493d      	ldr	r1, [pc, #244]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d022      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003858:	d11d      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	0e1b      	lsrs	r3, r3, #24
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003868:	4b32      	ldr	r3, [pc, #200]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	0f1b      	lsrs	r3, r3, #28
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	019a      	lsls	r2, r3, #6
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	4929      	ldr	r1, [pc, #164]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d028      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	019a      	lsls	r2, r3, #6
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	431a      	orrs	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	4917      	ldr	r1, [pc, #92]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4911      	ldr	r1, [pc, #68]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003900:	f7fd ff2c 	bl	800175c <HAL_GetTick>
 8003904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003908:	f7fd ff28 	bl	800175c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e007      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003926:	d1ef      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e049      	b.n	80039de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f841 	bl	80039e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 f9e8 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d001      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e054      	b.n	8003abe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_TIM_Base_Start_IT+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d022      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d01d      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <HAL_TIM_Base_Start_IT+0xe0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x80>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d115      	bne.n	8003aa8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xec>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d015      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0xbe>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d011      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	e008      	b.n	8003aba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e000      	b.n	8003abc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	40000800 	.word	0x40000800
 8003ad8:	40000c00 	.word	0x40000c00
 8003adc:	40010400 	.word	0x40010400
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40001800 	.word	0x40001800
 8003ae8:	00010007 	.word	0x00010007

08003aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0202 	mvn.w	r2, #2
 8003b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8e9 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8db 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8ec 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d020      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0204 	mvn.w	r2, #4
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8c3 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8b5 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8c6 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d020      	beq.n	8003be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01b      	beq.n	8003be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0208 	mvn.w	r2, #8
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f89d 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f88f 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8a0 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d020      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01b      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f877 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f869 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f87a 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0201 	mvn.w	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd f9fe 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00c      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f913 	bl	8003eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f90b 	bl	8003ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f834 	bl	8003d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00c      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0220 	mvn.w	r2, #32
 8003cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8d3 	bl	8003e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3f      	ldr	r2, [pc, #252]	; (8003e74 <TIM_Base_SetConfig+0x128>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3e      	ldr	r2, [pc, #248]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a32      	ldr	r2, [pc, #200]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d027      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d023      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2e      	ldr	r2, [pc, #184]	; (8003e74 <TIM_Base_SetConfig+0x128>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <TIM_Base_SetConfig+0x134>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <TIM_Base_SetConfig+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a28      	ldr	r2, [pc, #160]	; (8003e8c <TIM_Base_SetConfig+0x140>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <TIM_Base_SetConfig+0x144>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <TIM_Base_SetConfig+0x148>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_Base_SetConfig+0xf2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d103      	bne.n	8003e46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f043 0204 	orr.w	r2, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	40001800 	.word	0x40001800
 8003e90:	40001c00 	.word	0x40001c00
 8003e94:	40002000 	.word	0x40002000

08003e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e040      	b.n	8003f68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f9a4 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb16 	bl	800454c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8af 	bl	8004084 <UART_SetConfig>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e01b      	b.n	8003f68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fb95 	bl	8004690 <UART_CheckIdleState>
 8003f66:	4603      	mov	r3, r0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d177      	bne.n	8004078 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Transmit+0x24>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e070      	b.n	800407a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2221      	movs	r2, #33	; 0x21
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd fbd9 	bl	800175c <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d108      	bne.n	8003fd8 <HAL_UART_Transmit+0x68>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	e003      	b.n	8003fe0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fe0:	e02f      	b.n	8004042 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fbf7 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e03b      	b.n	800407a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3302      	adds	r3, #2
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e007      	b.n	8004030 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3301      	adds	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1c9      	bne.n	8003fe2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fbc1 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e005      	b.n	800407a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4ba6      	ldr	r3, [pc, #664]	; (8004348 <UART_SetConfig+0x2c4>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	6979      	ldr	r1, [r7, #20]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a94      	ldr	r2, [pc, #592]	; (800434c <UART_SetConfig+0x2c8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d120      	bne.n	8004142 <UART_SetConfig+0xbe>
 8004100:	4b93      	ldr	r3, [pc, #588]	; (8004350 <UART_SetConfig+0x2cc>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b03      	cmp	r3, #3
 800410c:	d816      	bhi.n	800413c <UART_SetConfig+0xb8>
 800410e:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <UART_SetConfig+0x90>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004125 	.word	0x08004125
 8004118:	08004131 	.word	0x08004131
 800411c:	0800412b 	.word	0x0800412b
 8004120:	08004137 	.word	0x08004137
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e150      	b.n	80043cc <UART_SetConfig+0x348>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e14d      	b.n	80043cc <UART_SetConfig+0x348>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e14a      	b.n	80043cc <UART_SetConfig+0x348>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e147      	b.n	80043cc <UART_SetConfig+0x348>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e144      	b.n	80043cc <UART_SetConfig+0x348>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a83      	ldr	r2, [pc, #524]	; (8004354 <UART_SetConfig+0x2d0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d132      	bne.n	80041b2 <UART_SetConfig+0x12e>
 800414c:	4b80      	ldr	r3, [pc, #512]	; (8004350 <UART_SetConfig+0x2cc>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d828      	bhi.n	80041ac <UART_SetConfig+0x128>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0xdc>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004195 	.word	0x08004195
 8004164:	080041ad 	.word	0x080041ad
 8004168:	080041ad 	.word	0x080041ad
 800416c:	080041ad 	.word	0x080041ad
 8004170:	080041a1 	.word	0x080041a1
 8004174:	080041ad 	.word	0x080041ad
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080041ad 	.word	0x080041ad
 8004180:	0800419b 	.word	0x0800419b
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041ad 	.word	0x080041ad
 800418c:	080041ad 	.word	0x080041ad
 8004190:	080041a7 	.word	0x080041a7
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e118      	b.n	80043cc <UART_SetConfig+0x348>
 800419a:	2302      	movs	r3, #2
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e115      	b.n	80043cc <UART_SetConfig+0x348>
 80041a0:	2304      	movs	r3, #4
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e112      	b.n	80043cc <UART_SetConfig+0x348>
 80041a6:	2308      	movs	r3, #8
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e10f      	b.n	80043cc <UART_SetConfig+0x348>
 80041ac:	2310      	movs	r3, #16
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e10c      	b.n	80043cc <UART_SetConfig+0x348>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a68      	ldr	r2, [pc, #416]	; (8004358 <UART_SetConfig+0x2d4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d120      	bne.n	80041fe <UART_SetConfig+0x17a>
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <UART_SetConfig+0x2cc>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041c6:	2b30      	cmp	r3, #48	; 0x30
 80041c8:	d013      	beq.n	80041f2 <UART_SetConfig+0x16e>
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d814      	bhi.n	80041f8 <UART_SetConfig+0x174>
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d009      	beq.n	80041e6 <UART_SetConfig+0x162>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d810      	bhi.n	80041f8 <UART_SetConfig+0x174>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <UART_SetConfig+0x15c>
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d006      	beq.n	80041ec <UART_SetConfig+0x168>
 80041de:	e00b      	b.n	80041f8 <UART_SetConfig+0x174>
 80041e0:	2300      	movs	r3, #0
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e0f2      	b.n	80043cc <UART_SetConfig+0x348>
 80041e6:	2302      	movs	r3, #2
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e0ef      	b.n	80043cc <UART_SetConfig+0x348>
 80041ec:	2304      	movs	r3, #4
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e0ec      	b.n	80043cc <UART_SetConfig+0x348>
 80041f2:	2308      	movs	r3, #8
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e0e9      	b.n	80043cc <UART_SetConfig+0x348>
 80041f8:	2310      	movs	r3, #16
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e0e6      	b.n	80043cc <UART_SetConfig+0x348>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a56      	ldr	r2, [pc, #344]	; (800435c <UART_SetConfig+0x2d8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d120      	bne.n	800424a <UART_SetConfig+0x1c6>
 8004208:	4b51      	ldr	r3, [pc, #324]	; (8004350 <UART_SetConfig+0x2cc>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004212:	2bc0      	cmp	r3, #192	; 0xc0
 8004214:	d013      	beq.n	800423e <UART_SetConfig+0x1ba>
 8004216:	2bc0      	cmp	r3, #192	; 0xc0
 8004218:	d814      	bhi.n	8004244 <UART_SetConfig+0x1c0>
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d009      	beq.n	8004232 <UART_SetConfig+0x1ae>
 800421e:	2b80      	cmp	r3, #128	; 0x80
 8004220:	d810      	bhi.n	8004244 <UART_SetConfig+0x1c0>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <UART_SetConfig+0x1a8>
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d006      	beq.n	8004238 <UART_SetConfig+0x1b4>
 800422a:	e00b      	b.n	8004244 <UART_SetConfig+0x1c0>
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e0cc      	b.n	80043cc <UART_SetConfig+0x348>
 8004232:	2302      	movs	r3, #2
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e0c9      	b.n	80043cc <UART_SetConfig+0x348>
 8004238:	2304      	movs	r3, #4
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e0c6      	b.n	80043cc <UART_SetConfig+0x348>
 800423e:	2308      	movs	r3, #8
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e0c3      	b.n	80043cc <UART_SetConfig+0x348>
 8004244:	2310      	movs	r3, #16
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0c0      	b.n	80043cc <UART_SetConfig+0x348>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a44      	ldr	r2, [pc, #272]	; (8004360 <UART_SetConfig+0x2dc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d125      	bne.n	80042a0 <UART_SetConfig+0x21c>
 8004254:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <UART_SetConfig+0x2cc>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004262:	d017      	beq.n	8004294 <UART_SetConfig+0x210>
 8004264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004268:	d817      	bhi.n	800429a <UART_SetConfig+0x216>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426e:	d00b      	beq.n	8004288 <UART_SetConfig+0x204>
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d811      	bhi.n	800429a <UART_SetConfig+0x216>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <UART_SetConfig+0x1fe>
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	d006      	beq.n	800428e <UART_SetConfig+0x20a>
 8004280:	e00b      	b.n	800429a <UART_SetConfig+0x216>
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e0a1      	b.n	80043cc <UART_SetConfig+0x348>
 8004288:	2302      	movs	r3, #2
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e09e      	b.n	80043cc <UART_SetConfig+0x348>
 800428e:	2304      	movs	r3, #4
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e09b      	b.n	80043cc <UART_SetConfig+0x348>
 8004294:	2308      	movs	r3, #8
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e098      	b.n	80043cc <UART_SetConfig+0x348>
 800429a:	2310      	movs	r3, #16
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e095      	b.n	80043cc <UART_SetConfig+0x348>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <UART_SetConfig+0x2e0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d125      	bne.n	80042f6 <UART_SetConfig+0x272>
 80042aa:	4b29      	ldr	r3, [pc, #164]	; (8004350 <UART_SetConfig+0x2cc>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b8:	d017      	beq.n	80042ea <UART_SetConfig+0x266>
 80042ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042be:	d817      	bhi.n	80042f0 <UART_SetConfig+0x26c>
 80042c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c4:	d00b      	beq.n	80042de <UART_SetConfig+0x25a>
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ca:	d811      	bhi.n	80042f0 <UART_SetConfig+0x26c>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <UART_SetConfig+0x254>
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d006      	beq.n	80042e4 <UART_SetConfig+0x260>
 80042d6:	e00b      	b.n	80042f0 <UART_SetConfig+0x26c>
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e076      	b.n	80043cc <UART_SetConfig+0x348>
 80042de:	2302      	movs	r3, #2
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e073      	b.n	80043cc <UART_SetConfig+0x348>
 80042e4:	2304      	movs	r3, #4
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e070      	b.n	80043cc <UART_SetConfig+0x348>
 80042ea:	2308      	movs	r3, #8
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e06d      	b.n	80043cc <UART_SetConfig+0x348>
 80042f0:	2310      	movs	r3, #16
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e06a      	b.n	80043cc <UART_SetConfig+0x348>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <UART_SetConfig+0x2e4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d138      	bne.n	8004372 <UART_SetConfig+0x2ee>
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <UART_SetConfig+0x2cc>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800430a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800430e:	d017      	beq.n	8004340 <UART_SetConfig+0x2bc>
 8004310:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004314:	d82a      	bhi.n	800436c <UART_SetConfig+0x2e8>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431a:	d00b      	beq.n	8004334 <UART_SetConfig+0x2b0>
 800431c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004320:	d824      	bhi.n	800436c <UART_SetConfig+0x2e8>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <UART_SetConfig+0x2aa>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d006      	beq.n	800433a <UART_SetConfig+0x2b6>
 800432c:	e01e      	b.n	800436c <UART_SetConfig+0x2e8>
 800432e:	2300      	movs	r3, #0
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e04b      	b.n	80043cc <UART_SetConfig+0x348>
 8004334:	2302      	movs	r3, #2
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e048      	b.n	80043cc <UART_SetConfig+0x348>
 800433a:	2304      	movs	r3, #4
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e045      	b.n	80043cc <UART_SetConfig+0x348>
 8004340:	2308      	movs	r3, #8
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e042      	b.n	80043cc <UART_SetConfig+0x348>
 8004346:	bf00      	nop
 8004348:	efff69f3 	.word	0xefff69f3
 800434c:	40011000 	.word	0x40011000
 8004350:	40023800 	.word	0x40023800
 8004354:	40004400 	.word	0x40004400
 8004358:	40004800 	.word	0x40004800
 800435c:	40004c00 	.word	0x40004c00
 8004360:	40005000 	.word	0x40005000
 8004364:	40011400 	.word	0x40011400
 8004368:	40007800 	.word	0x40007800
 800436c:	2310      	movs	r3, #16
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e02c      	b.n	80043cc <UART_SetConfig+0x348>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a72      	ldr	r2, [pc, #456]	; (8004540 <UART_SetConfig+0x4bc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d125      	bne.n	80043c8 <UART_SetConfig+0x344>
 800437c:	4b71      	ldr	r3, [pc, #452]	; (8004544 <UART_SetConfig+0x4c0>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004386:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800438a:	d017      	beq.n	80043bc <UART_SetConfig+0x338>
 800438c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004390:	d817      	bhi.n	80043c2 <UART_SetConfig+0x33e>
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004396:	d00b      	beq.n	80043b0 <UART_SetConfig+0x32c>
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	d811      	bhi.n	80043c2 <UART_SetConfig+0x33e>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <UART_SetConfig+0x326>
 80043a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a6:	d006      	beq.n	80043b6 <UART_SetConfig+0x332>
 80043a8:	e00b      	b.n	80043c2 <UART_SetConfig+0x33e>
 80043aa:	2300      	movs	r3, #0
 80043ac:	77fb      	strb	r3, [r7, #31]
 80043ae:	e00d      	b.n	80043cc <UART_SetConfig+0x348>
 80043b0:	2302      	movs	r3, #2
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e00a      	b.n	80043cc <UART_SetConfig+0x348>
 80043b6:	2304      	movs	r3, #4
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e007      	b.n	80043cc <UART_SetConfig+0x348>
 80043bc:	2308      	movs	r3, #8
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e004      	b.n	80043cc <UART_SetConfig+0x348>
 80043c2:	2310      	movs	r3, #16
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e001      	b.n	80043cc <UART_SetConfig+0x348>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d4:	d15b      	bne.n	800448e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d828      	bhi.n	800442e <UART_SetConfig+0x3aa>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <UART_SetConfig+0x360>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	08004409 	.word	0x08004409
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004419 	.word	0x08004419
 80043f0:	0800442f 	.word	0x0800442f
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	0800442f 	.word	0x0800442f
 80043fc:	0800442f 	.word	0x0800442f
 8004400:	0800442f 	.word	0x0800442f
 8004404:	08004427 	.word	0x08004427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004408:	f7fe fe14 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 800440c:	61b8      	str	r0, [r7, #24]
        break;
 800440e:	e013      	b.n	8004438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004410:	f7fe fe24 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 8004414:	61b8      	str	r0, [r7, #24]
        break;
 8004416:	e00f      	b.n	8004438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004418:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <UART_SetConfig+0x4c4>)
 800441a:	61bb      	str	r3, [r7, #24]
        break;
 800441c:	e00c      	b.n	8004438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441e:	f7fe fcf7 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8004422:	61b8      	str	r0, [r7, #24]
        break;
 8004424:	e008      	b.n	8004438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	61bb      	str	r3, [r7, #24]
        break;
 800442c:	e004      	b.n	8004438 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	77bb      	strb	r3, [r7, #30]
        break;
 8004436:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d074      	beq.n	8004528 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	005a      	lsls	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	d916      	bls.n	8004488 <UART_SetConfig+0x404>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d212      	bcs.n	8004488 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	b29a      	uxth	r2, r3
 8004478:	89fb      	ldrh	r3, [r7, #14]
 800447a:	4313      	orrs	r3, r2
 800447c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	89fa      	ldrh	r2, [r7, #14]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	e04f      	b.n	8004528 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	77bb      	strb	r3, [r7, #30]
 800448c:	e04c      	b.n	8004528 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448e:	7ffb      	ldrb	r3, [r7, #31]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d828      	bhi.n	80044e6 <UART_SetConfig+0x462>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x418>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044c9 	.word	0x080044c9
 80044a4:	080044d1 	.word	0x080044d1
 80044a8:	080044e7 	.word	0x080044e7
 80044ac:	080044d7 	.word	0x080044d7
 80044b0:	080044e7 	.word	0x080044e7
 80044b4:	080044e7 	.word	0x080044e7
 80044b8:	080044e7 	.word	0x080044e7
 80044bc:	080044df 	.word	0x080044df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fe fdb8 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 80044c4:	61b8      	str	r0, [r7, #24]
        break;
 80044c6:	e013      	b.n	80044f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c8:	f7fe fdc8 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 80044cc:	61b8      	str	r0, [r7, #24]
        break;
 80044ce:	e00f      	b.n	80044f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <UART_SetConfig+0x4c4>)
 80044d2:	61bb      	str	r3, [r7, #24]
        break;
 80044d4:	e00c      	b.n	80044f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d6:	f7fe fc9b 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 80044da:	61b8      	str	r0, [r7, #24]
        break;
 80044dc:	e008      	b.n	80044f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e004      	b.n	80044f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	77bb      	strb	r3, [r7, #30]
        break;
 80044ee:	bf00      	nop
    }

    if (pclk != 0U)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	085a      	lsrs	r2, r3, #1
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	441a      	add	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d909      	bls.n	8004524 <UART_SetConfig+0x4a0>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d205      	bcs.n	8004524 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	e001      	b.n	8004528 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004534:	7fbb      	ldrb	r3, [r7, #30]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40007c00 	.word	0x40007c00
 8004544:	40023800 	.word	0x40023800
 8004548:	00f42400 	.word	0x00f42400

0800454c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01a      	beq.n	8004662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464a:	d10a      	bne.n	8004662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b098      	sub	sp, #96	; 0x60
 8004694:	af02      	add	r7, sp, #8
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a0:	f7fd f85c 	bl	800175c <HAL_GetTick>
 80046a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d12e      	bne.n	8004712 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046bc:	2200      	movs	r2, #0
 80046be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f88c 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d021      	beq.n	8004712 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e2:	653b      	str	r3, [r7, #80]	; 0x50
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ec:	647b      	str	r3, [r7, #68]	; 0x44
 80046ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e6      	bne.n	80046ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e062      	b.n	80047d8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d149      	bne.n	80047b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f856 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03c      	beq.n	80047b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	623b      	str	r3, [r7, #32]
   return(result);
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
 800475a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800475e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e6      	bne.n	800473a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3308      	adds	r3, #8
 8004772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	60fb      	str	r3, [r7, #12]
   return(result);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800478c:	61fa      	str	r2, [r7, #28]
 800478e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	617b      	str	r3, [r7, #20]
   return(result);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e011      	b.n	80047d8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3758      	adds	r7, #88	; 0x58
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	e04f      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d04b      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fc ffaf 	bl	800175c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <UART_WaitOnFlagUntilTimeout+0x30>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e04e      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d037      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d034      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d031      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d110      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2208      	movs	r2, #8
 8004842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f838 	bl	80048ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2208      	movs	r2, #8
 800484e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e029      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486c:	d111      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f81e 	bl	80048ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e00f      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	bf0c      	ite	eq
 80048a2:	2301      	moveq	r3, #1
 80048a4:	2300      	movne	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d0a0      	beq.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b095      	sub	sp, #84	; 0x54
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
 80048e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e6      	bne.n	80048c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	61fb      	str	r3, [r7, #28]
   return(result);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	2b01      	cmp	r3, #1
 800492e:	d118      	bne.n	8004962 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	60bb      	str	r3, [r7, #8]
   return(result);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e6      	bne.n	8004930 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004976:	bf00      	nop
 8004978:	3754      	adds	r7, #84	; 0x54
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004984:	b084      	sub	sp, #16
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	f107 001c 	add.w	r0, r7, #28
 8004992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004996:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800499a:	2b01      	cmp	r3, #1
 800499c:	d121      	bne.n	80049e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <USB_CoreInit+0xb0>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa92 	bl	8004f00 <USB_CoreReset>
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e010      	b.n	8004a04 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa86 	bl	8004f00 <USB_CoreReset>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a04:	7fbb      	ldrb	r3, [r7, #30]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10b      	bne.n	8004a22 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f043 0206 	orr.w	r2, r3, #6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2e:	b004      	add	sp, #16
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	ffbdffbf 	.word	0xffbdffbf

08004a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 0201 	bic.w	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d115      	bne.n	8004aa8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a88:	200a      	movs	r0, #10
 8004a8a:	f7fc fe73 	bl	8001774 <HAL_Delay>
      ms += 10U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	330a      	adds	r3, #10
 8004a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa25 	bl	8004ee4 <USB_GetMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d01e      	beq.n	8004ade <USB_SetCurrentMode+0x84>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2bc7      	cmp	r3, #199	; 0xc7
 8004aa4:	d9f0      	bls.n	8004a88 <USB_SetCurrentMode+0x2e>
 8004aa6:	e01a      	b.n	8004ade <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d115      	bne.n	8004ada <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004aba:	200a      	movs	r0, #10
 8004abc:	f7fc fe5a 	bl	8001774 <HAL_Delay>
      ms += 10U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	330a      	adds	r3, #10
 8004ac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa0c 	bl	8004ee4 <USB_GetMode>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <USB_SetCurrentMode+0x84>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2bc7      	cmp	r3, #199	; 0xc7
 8004ad6:	d9f0      	bls.n	8004aba <USB_SetCurrentMode+0x60>
 8004ad8:	e001      	b.n	8004ade <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e005      	b.n	8004aea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2bc8      	cmp	r3, #200	; 0xc8
 8004ae2:	d101      	bne.n	8004ae8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af4:	b084      	sub	sp, #16
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e009      	b.n	8004b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3340      	adds	r3, #64	; 0x40
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3301      	adds	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b0e      	cmp	r3, #14
 8004b2c:	d9f2      	bls.n	8004b14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11c      	bne.n	8004b70 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b44:	f043 0302 	orr.w	r3, r3, #2
 8004b48:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e005      	b.n	8004b7c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b82:	461a      	mov	r2, r3
 8004b84:	2300      	movs	r3, #0
 8004b86:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10d      	bne.n	8004bac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f968 	bl	8004e70 <USB_SetDevSpeed>
 8004ba0:	e008      	b.n	8004bb4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f963 	bl	8004e70 <USB_SetDevSpeed>
 8004baa:	e003      	b.n	8004bb4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bac:	2103      	movs	r1, #3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f95e 	bl	8004e70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bb4:	2110      	movs	r1, #16
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8fa 	bl	8004db0 <USB_FlushTxFifo>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f924 	bl	8004e14 <USB_FlushRxFifo>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be8:	461a      	mov	r2, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e043      	b.n	8004c88 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c16:	d118      	bne.n	8004c4a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e013      	b.n	8004c5c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	461a      	mov	r2, r3
 8004c42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	e008      	b.n	8004c5c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3301      	adds	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d3b5      	bcc.n	8004c00 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e043      	b.n	8004d22 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb0:	d118      	bne.n	8004ce4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e013      	b.n	8004cf6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e008      	b.n	8004cf6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	461a      	mov	r2, r3
 8004d16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d26:	461a      	mov	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d3b5      	bcc.n	8004c9a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f043 0210 	orr.w	r2, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <USB_DevInit+0x2b4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f043 0208 	orr.w	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d105      	bne.n	8004d98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <USB_DevInit+0x2b8>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004da4:	b004      	add	sp, #16
 8004da6:	4770      	bx	lr
 8004da8:	803c3800 	.word	0x803c3800
 8004dac:	40000004 	.word	0x40000004

08004db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004dca:	d901      	bls.n	8004dd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e01b      	b.n	8004e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	daf2      	bge.n	8004dbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	019b      	lsls	r3, r3, #6
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004df4:	d901      	bls.n	8004dfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e006      	b.n	8004e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d0f0      	beq.n	8004de8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e2c:	d901      	bls.n	8004e32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e018      	b.n	8004e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	daf2      	bge.n	8004e20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2210      	movs	r2, #16
 8004e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e50:	d901      	bls.n	8004e56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e006      	b.n	8004e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d0f0      	beq.n	8004e44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f18:	d901      	bls.n	8004f1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e022      	b.n	8004f64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	daf2      	bge.n	8004f0c <USB_CoreReset+0xc>

  count = 10U;
 8004f26:	230a      	movs	r3, #10
 8004f28:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004f2a:	e002      	b.n	8004f32 <USB_CoreReset+0x32>
  {
    count--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f9      	bne.n	8004f2c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004f50:	d901      	bls.n	8004f56 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e006      	b.n	8004f64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d0f0      	beq.n	8004f44 <USB_CoreReset+0x44>

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f82:	2b84      	cmp	r3, #132	; 0x84
 8004f84:	d005      	beq.n	8004f92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3303      	adds	r3, #3
 8004f90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa6:	f3ef 8305 	mrs	r3, IPSR
 8004faa:	607b      	str	r3, [r7, #4]
  return(result);
 8004fac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bf14      	ite	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	2300      	moveq	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fc8:	f001 f96a 	bl	80062a0 <vTaskStartScheduler>
  
  return osOK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd4:	b089      	sub	sp, #36	; 0x24
 8004fd6:	af04      	add	r7, sp, #16
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <osThreadCreate+0x54>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01c      	beq.n	8005026 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685c      	ldr	r4, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681d      	ldr	r5, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691e      	ldr	r6, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ffb6 	bl	8004f70 <makeFreeRtosPriority>
 8005004:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500e:	9202      	str	r2, [sp, #8]
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	9100      	str	r1, [sp, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4632      	mov	r2, r6
 8005018:	4629      	mov	r1, r5
 800501a:	4620      	mov	r0, r4
 800501c:	f000 ff6e 	bl	8005efc <xTaskCreateStatic>
 8005020:	4603      	mov	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e01c      	b.n	8005060 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685c      	ldr	r4, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005032:	b29e      	uxth	r6, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ff98 	bl	8004f70 <makeFreeRtosPriority>
 8005040:	4602      	mov	r2, r0
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	9200      	str	r2, [sp, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	4632      	mov	r2, r6
 800504e:	4629      	mov	r1, r5
 8005050:	4620      	mov	r0, r4
 8005052:	f000 ffb6 	bl	8005fc2 <xTaskCreate>
 8005056:	4603      	mov	r3, r0
 8005058:	2b01      	cmp	r3, #1
 800505a:	d001      	beq.n	8005060 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800506a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4619      	mov	r1, r3
 8005080:	2001      	movs	r0, #1
 8005082:	f000 fac2 	bl	800560a <xQueueCreateMutexStatic>
 8005086:	4603      	mov	r3, r0
 8005088:	e003      	b.n	8005092 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800508a:	2001      	movs	r0, #1
 800508c:	f000 faa5 	bl	80055da <xQueueCreateMutex>
 8005090:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <osMutexWait+0x18>
    return osErrorParameter;
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	e03a      	b.n	800512a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d103      	bne.n	80050c8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e009      	b.n	80050dc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d006      	beq.n	80050dc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <osMutexWait+0x40>
      ticks = 1;
 80050d8:	2301      	movs	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050dc:	f7ff ff60 	bl	8004fa0 <inHandlerMode>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d017      	beq.n	8005116 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	461a      	mov	r2, r3
 80050ec:	2100      	movs	r1, #0
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fd56 	bl	8005ba0 <xQueueReceiveFromISR>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <osMutexWait+0x62>
      return osErrorOS;
 80050fa:	23ff      	movs	r3, #255	; 0xff
 80050fc:	e015      	b.n	800512a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d011      	beq.n	8005128 <osMutexWait+0x8c>
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <osMutexWait+0x98>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	e008      	b.n	8005128 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fc2d 	bl	8005978 <xQueueSemaphoreTake>
 800511e:	4603      	mov	r3, r0
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <osMutexWait+0x8c>
    return osErrorOS;
 8005124:	23ff      	movs	r3, #255	; 0xff
 8005126:	e000      	b.n	800512a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005148:	f7ff ff2a 	bl	8004fa0 <inHandlerMode>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb77 	bl	800584c <xQueueGiveFromISR>
 800515e:	4603      	mov	r3, r0
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <osMutexRelease+0x30>
      return osErrorOS;
 8005164:	23ff      	movs	r3, #255	; 0xff
 8005166:	e017      	b.n	8005198 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d013      	beq.n	8005196 <osMutexRelease+0x5e>
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <osMutexRelease+0x68>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	e00a      	b.n	8005196 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005180:	2300      	movs	r3, #0
 8005182:	2200      	movs	r2, #0
 8005184:	2100      	movs	r1, #0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa5a 	bl	8005640 <xQueueGenericSend>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d001      	beq.n	8005196 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005192:	23ff      	movs	r3, #255	; 0xff
 8005194:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f103 0208 	add.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f103 0208 	add.w	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f103 0208 	add.w	r2, r3, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e00c      	b.n	8005280 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3308      	adds	r3, #8
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e002      	b.n	8005274 <vListInsert+0x2e>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	d2f6      	bcs.n	800526e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6892      	ldr	r2, [r2, #8]
 80052ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6852      	ldr	r2, [r2, #4]
 80052d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d103      	bne.n	80052ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	1e5a      	subs	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10c      	bne.n	800533a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	b672      	cpsid	i
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	b662      	cpsie	i
 8005334:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800533a:	f001 ff0f 	bl	800715c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	3b01      	subs	r3, #1
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	441a      	add	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	22ff      	movs	r2, #255	; 0xff
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d114      	bne.n	80053ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3310      	adds	r3, #16
 800539c:	4618      	mov	r0, r3
 800539e:	f001 f9cd 	bl	800673c <xTaskRemoveFromEventList>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <xQueueGenericReset+0xd0>)
 80053aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	e009      	b.n	80053ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3310      	adds	r3, #16
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fef0 	bl	80051a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff feeb 	bl	80051a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053ce:	f001 fef9 	bl	80071c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053d2:	2301      	movs	r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08e      	sub	sp, #56	; 0x38
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10c      	bne.n	800540e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	b672      	cpsid	i
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	b662      	cpsie	i
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	b672      	cpsid	i
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	b662      	cpsie	i
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <xQueueGenericCreateStatic+0x5a>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <xQueueGenericCreateStatic+0x5e>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <xQueueGenericCreateStatic+0x60>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10c      	bne.n	800545e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	b672      	cpsid	i
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	b662      	cpsie	i
 8005458:	623b      	str	r3, [r7, #32]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <xQueueGenericCreateStatic+0x8a>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <xQueueGenericCreateStatic+0x8e>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <xQueueGenericCreateStatic+0x90>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10c      	bne.n	800548e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	b672      	cpsid	i
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	b662      	cpsie	i
 8005488:	61fb      	str	r3, [r7, #28]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800548e:	2348      	movs	r3, #72	; 0x48
 8005490:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b48      	cmp	r3, #72	; 0x48
 8005496:	d00c      	beq.n	80054b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	b672      	cpsid	i
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	b662      	cpsie	i
 80054ac:	61bb      	str	r3, [r7, #24]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f847 	bl	8005568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3730      	adds	r7, #48	; 0x30
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10c      	bne.n	8005512 <xQueueGenericCreate+0x2e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	b672      	cpsid	i
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	b662      	cpsie	i
 800550c:	613b      	str	r3, [r7, #16]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	e004      	b.n	8005528 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	3348      	adds	r3, #72	; 0x48
 800552c:	4618      	mov	r0, r3
 800552e:	f001 ff41 	bl	80073b4 <pvPortMalloc>
 8005532:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d011      	beq.n	800555e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	3348      	adds	r3, #72	; 0x48
 8005542:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800554c:	79fa      	ldrb	r2, [r7, #7]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4613      	mov	r3, r2
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f805 	bl	8005568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800555e:	69bb      	ldr	r3, [r7, #24]
	}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e002      	b.n	800558a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005596:	2101      	movs	r1, #1
 8005598:	69b8      	ldr	r0, [r7, #24]
 800559a:	f7ff feb7 	bl	800530c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00e      	beq.n	80055d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055c6:	2300      	movs	r3, #0
 80055c8:	2200      	movs	r2, #0
 80055ca:	2100      	movs	r1, #0
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f837 	bl	8005640 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	4603      	mov	r3, r0
 80055e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6939      	ldr	r1, [r7, #16]
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7ff ff76 	bl	80054e4 <xQueueGenericCreate>
 80055f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff ffd3 	bl	80055a6 <prvInitialiseMutex>

		return xNewQueue;
 8005600:	68fb      	ldr	r3, [r7, #12]
	}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af02      	add	r7, sp, #8
 8005610:	4603      	mov	r3, r0
 8005612:	6039      	str	r1, [r7, #0]
 8005614:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2200      	movs	r2, #0
 8005626:	6939      	ldr	r1, [r7, #16]
 8005628:	6978      	ldr	r0, [r7, #20]
 800562a:	f7ff fed9 	bl	80053e0 <xQueueGenericCreateStatic>
 800562e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ffb8 	bl	80055a6 <prvInitialiseMutex>

		return xNewQueue;
 8005636:	68fb      	ldr	r3, [r7, #12]
	}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10c      	bne.n	8005676 <xQueueGenericSend+0x36>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d103      	bne.n	8005684 <xQueueGenericSend+0x44>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <xQueueGenericSend+0x48>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <xQueueGenericSend+0x4a>
 8005688:	2300      	movs	r3, #0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10c      	bne.n	80056a8 <xQueueGenericSend+0x68>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	b672      	cpsid	i
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	b662      	cpsie	i
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d103      	bne.n	80056b6 <xQueueGenericSend+0x76>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <xQueueGenericSend+0x7a>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <xQueueGenericSend+0x7c>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10c      	bne.n	80056da <xQueueGenericSend+0x9a>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	b672      	cpsid	i
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	b662      	cpsie	i
 80056d4:	623b      	str	r3, [r7, #32]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056da:	f001 f9f3 	bl	8006ac4 <xTaskGetSchedulerState>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <xQueueGenericSend+0xaa>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <xQueueGenericSend+0xae>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <xQueueGenericSend+0xb0>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10c      	bne.n	800570e <xQueueGenericSend+0xce>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	b672      	cpsid	i
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	b662      	cpsie	i
 8005708:	61fb      	str	r3, [r7, #28]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800570e:	f001 fd25 	bl	800715c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <xQueueGenericSend+0xe4>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d129      	bne.n	8005778 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572a:	f000 fad7 	bl	8005cdc <prvCopyDataToQueue>
 800572e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	3324      	adds	r3, #36	; 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fffd 	bl	800673c <xTaskRemoveFromEventList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005748:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <xQueueGenericSend+0x208>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	e00a      	b.n	8005770 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <xQueueGenericSend+0x208>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005770:	f001 fd28 	bl	80071c4 <vPortExitCritical>
				return pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	e063      	b.n	8005840 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800577e:	f001 fd21 	bl	80071c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005782:	2300      	movs	r3, #0
 8005784:	e05c      	b.n	8005840 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f837 	bl	8006804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800579a:	f001 fd13 	bl	80071c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800579e:	f000 fde3 	bl	8006368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a2:	f001 fcdb 	bl	800715c <vPortEnterCritical>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d103      	bne.n	80057bc <xQueueGenericSend+0x17c>
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d103      	bne.n	80057d2 <xQueueGenericSend+0x192>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d2:	f001 fcf7 	bl	80071c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057d6:	1d3a      	adds	r2, r7, #4
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f826 	bl	8006830 <xTaskCheckForTimeOut>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d124      	bne.n	8005834 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ec:	f000 fb6e 	bl	8005ecc <prvIsQueueFull>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	3310      	adds	r3, #16
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 ff76 	bl	80066f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005806:	f000 faf9 	bl	8005dfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800580a:	f000 fdbb 	bl	8006384 <xTaskResumeAll>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f af7c 	bne.w	800570e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <xQueueGenericSend+0x208>)
 8005818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	e772      	b.n	800570e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582a:	f000 fae7 	bl	8005dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800582e:	f000 fda9 	bl	8006384 <xTaskResumeAll>
 8005832:	e76c      	b.n	800570e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005836:	f000 fae1 	bl	8005dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583a:	f000 fda3 	bl	8006384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800583e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005840:	4618      	mov	r0, r3
 8005842:	3738      	adds	r7, #56	; 0x38
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10c      	bne.n	800587a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	b672      	cpsid	i
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	b662      	cpsie	i
 8005874:	623b      	str	r3, [r7, #32]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <xQueueGiveFromISR+0x50>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	b672      	cpsid	i
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	b662      	cpsie	i
 8005896:	61fb      	str	r3, [r7, #28]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <xQueueGiveFromISR+0x60>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <xQueueGiveFromISR+0x64>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <xQueueGiveFromISR+0x66>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10c      	bne.n	80058d0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	b672      	cpsid	i
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	b662      	cpsie	i
 80058ca:	61bb      	str	r3, [r7, #24]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058d0:	f001 fd2c 	bl	800732c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058d4:	f3ef 8211 	mrs	r2, BASEPRI
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	b672      	cpsid	i
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	b662      	cpsie	i
 80058ec:	617a      	str	r2, [r7, #20]
 80058ee:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005900:	429a      	cmp	r2, r3
 8005902:	d22b      	bcs.n	800595c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800590a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005916:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d112      	bne.n	8005946 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d016      	beq.n	8005956 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	3324      	adds	r3, #36	; 0x24
 800592c:	4618      	mov	r0, r3
 800592e:	f000 ff05 	bl	800673c <xTaskRemoveFromEventList>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e007      	b.n	8005956 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800594a:	3301      	adds	r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	b25a      	sxtb	r2, r3
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
 800595a:	e001      	b.n	8005960 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800595c:	2300      	movs	r3, #0
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800596a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800596e:	4618      	mov	r0, r3
 8005970:	3738      	adds	r7, #56	; 0x38
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	; 0x38
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10c      	bne.n	80059ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	b672      	cpsid	i
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	b662      	cpsie	i
 80059a8:	623b      	str	r3, [r7, #32]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	b672      	cpsid	i
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	b662      	cpsie	i
 80059ca:	61fb      	str	r3, [r7, #28]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d0:	f001 f878 	bl	8006ac4 <xTaskGetSchedulerState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <xQueueSemaphoreTake+0x68>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <xQueueSemaphoreTake+0x6c>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <xQueueSemaphoreTake+0x6e>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10c      	bne.n	8005a04 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	b672      	cpsid	i
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	b662      	cpsie	i
 80059fe:	61bb      	str	r3, [r7, #24]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a04:	f001 fbaa 	bl	800715c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d024      	beq.n	8005a5e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	1e5a      	subs	r2, r3, #1
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a24:	f001 fa14 	bl	8006e50 <pvTaskIncrementMutexHeldCount>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00f      	beq.n	8005a56 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	3310      	adds	r3, #16
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fe7e 	bl	800673c <xTaskRemoveFromEventList>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a46:	4b55      	ldr	r3, [pc, #340]	; (8005b9c <xQueueSemaphoreTake+0x224>)
 8005a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a56:	f001 fbb5 	bl	80071c4 <vPortExitCritical>
				return pdPASS;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e099      	b.n	8005b92 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d113      	bne.n	8005a8c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	b672      	cpsid	i
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	b662      	cpsie	i
 8005a7e:	617b      	str	r3, [r7, #20]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a84:	f001 fb9e 	bl	80071c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e082      	b.n	8005b92 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 feb4 	bl	8006804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa0:	f001 fb90 	bl	80071c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa4:	f000 fc60 	bl	8006368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa8:	f001 fb58 	bl	800715c <vPortEnterCritical>
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d103      	bne.n	8005ac2 <xQueueSemaphoreTake+0x14a>
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d103      	bne.n	8005ad8 <xQueueSemaphoreTake+0x160>
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f001 fb74 	bl	80071c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005adc:	463a      	mov	r2, r7
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fea3 	bl	8006830 <xTaskCheckForTimeOut>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d132      	bne.n	8005b56 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af2:	f000 f9d5 	bl	8005ea0 <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d026      	beq.n	8005b4a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005b04:	f001 fb2a 	bl	800715c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fff7 	bl	8006b00 <xTaskPriorityInherit>
 8005b12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b14:	f001 fb56 	bl	80071c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fde5 	bl	80066f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b28:	f000 f968 	bl	8005dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b2c:	f000 fc2a 	bl	8006384 <xTaskResumeAll>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f47f af66 	bne.w	8005a04 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005b38:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <xQueueSemaphoreTake+0x224>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	e75c      	b.n	8005a04 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4c:	f000 f956 	bl	8005dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b50:	f000 fc18 	bl	8006384 <xTaskResumeAll>
 8005b54:	e756      	b.n	8005a04 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b58:	f000 f950 	bl	8005dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b5c:	f000 fc12 	bl	8006384 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b62:	f000 f99d 	bl	8005ea0 <prvIsQueueEmpty>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f43f af4b 	beq.w	8005a04 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005b74:	f001 faf2 	bl	800715c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b7a:	f000 f897 	bl	8005cac <prvGetDisinheritPriorityAfterTimeout>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 f8c4 	bl	8006d14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b8c:	f001 fb1a 	bl	80071c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3738      	adds	r7, #56	; 0x38
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed04 	.word	0xe000ed04

08005ba0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10c      	bne.n	8005bd0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	b672      	cpsid	i
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	b662      	cpsie	i
 8005bca:	623b      	str	r3, [r7, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <xQueueReceiveFromISR+0x3e>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <xQueueReceiveFromISR+0x42>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <xQueueReceiveFromISR+0x44>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10c      	bne.n	8005c02 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	b672      	cpsid	i
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	b662      	cpsie	i
 8005bfc:	61fb      	str	r3, [r7, #28]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c02:	f001 fb93 	bl	800732c <vPortValidateInterruptPriority>
	__asm volatile
 8005c06:	f3ef 8211 	mrs	r2, BASEPRI
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	b672      	cpsid	i
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	b662      	cpsie	i
 8005c1e:	61ba      	str	r2, [r7, #24]
 8005c20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02f      	beq.n	8005c92 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c40:	f000 f8b6 	bl	8005db0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d112      	bne.n	8005c7c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	3310      	adds	r3, #16
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fd6a 	bl	800673c <xTaskRemoveFromEventList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e007      	b.n	8005c8c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c80:	3301      	adds	r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	b25a      	sxtb	r2, r3
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c90:	e001      	b.n	8005c96 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f383 8811 	msr	BASEPRI, r3
}
 8005ca0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3738      	adds	r7, #56	; 0x38
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1c3 0307 	rsb	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e001      	b.n	8005cce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005cce:	68fb      	ldr	r3, [r7, #12]
	}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10d      	bne.n	8005d16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d14d      	bne.n	8005d9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 ff7a 	bl	8006c00 <xTaskPriorityDisinherit>
 8005d0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	e043      	b.n	8005d9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d119      	bne.n	8005d50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6858      	ldr	r0, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	461a      	mov	r2, r3
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	f001 fd6c 	bl	8007804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d32b      	bcc.n	8005d9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e026      	b.n	8005d9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68d8      	ldr	r0, [r3, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	f001 fd52 	bl	8007804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	425b      	negs	r3, r3
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d207      	bcs.n	8005d8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	425b      	negs	r3, r3
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d105      	bne.n	8005d9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005da6:	697b      	ldr	r3, [r7, #20]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d018      	beq.n	8005df4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	441a      	add	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d303      	bcc.n	8005de4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68d9      	ldr	r1, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	461a      	mov	r2, r3
 8005dee:	6838      	ldr	r0, [r7, #0]
 8005df0:	f001 fd08 	bl	8007804 <memcpy>
	}
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e04:	f001 f9aa 	bl	800715c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e10:	e011      	b.n	8005e36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d012      	beq.n	8005e40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fc8c 	bl	800673c <xTaskRemoveFromEventList>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e2a:	f000 fd67 	bl	80068fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dce9      	bgt.n	8005e12 <prvUnlockQueue+0x16>
 8005e3e:	e000      	b.n	8005e42 <prvUnlockQueue+0x46>
					break;
 8005e40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e4a:	f001 f9bb 	bl	80071c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e4e:	f001 f985 	bl	800715c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e5a:	e011      	b.n	8005e80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d012      	beq.n	8005e8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3310      	adds	r3, #16
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fc67 	bl	800673c <xTaskRemoveFromEventList>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e74:	f000 fd42 	bl	80068fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	dce9      	bgt.n	8005e5c <prvUnlockQueue+0x60>
 8005e88:	e000      	b.n	8005e8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	22ff      	movs	r2, #255	; 0xff
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e94:	f001 f996 	bl	80071c4 <vPortExitCritical>
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ea8:	f001 f958 	bl	800715c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e001      	b.n	8005ebe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ebe:	f001 f981 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ed4:	f001 f942 	bl	800715c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d102      	bne.n	8005eea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e001      	b.n	8005eee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005eee:	f001 f969 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	b672      	cpsid	i
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	b662      	cpsie	i
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10c      	bne.n	8005f4a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	b672      	cpsid	i
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	b662      	cpsie	i
 8005f44:	61fb      	str	r3, [r7, #28]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f4a:	2354      	movs	r3, #84	; 0x54
 8005f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b54      	cmp	r3, #84	; 0x54
 8005f52:	d00c      	beq.n	8005f6e <xTaskCreateStatic+0x72>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	b672      	cpsid	i
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	b662      	cpsie	i
 8005f68:	61bb      	str	r3, [r7, #24]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01e      	beq.n	8005fb4 <xTaskCreateStatic+0xb8>
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9303      	str	r3, [sp, #12]
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	f107 0314 	add.w	r3, r7, #20
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f850 	bl	800604c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fae:	f000 f8d7 	bl	8006160 <prvAddNewTaskToReadyList>
 8005fb2:	e001      	b.n	8005fb8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fb8:	697b      	ldr	r3, [r7, #20]
	}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3728      	adds	r7, #40	; 0x28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b08c      	sub	sp, #48	; 0x30
 8005fc6:	af04      	add	r7, sp, #16
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 f9ec 	bl	80073b4 <pvPortMalloc>
 8005fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fe4:	2054      	movs	r0, #84	; 0x54
 8005fe6:	f001 f9e5 	bl	80073b4 <pvPortMalloc>
 8005fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff8:	e005      	b.n	8006006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f001 faa4 	bl	8007548 <vPortFree>
 8006000:	e001      	b.n	8006006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d017      	beq.n	800603c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	2300      	movs	r3, #0
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	9302      	str	r3, [sp, #8]
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f80e 	bl	800604c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006030:	69f8      	ldr	r0, [r7, #28]
 8006032:	f000 f895 	bl	8006160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006036:	2301      	movs	r3, #1
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e002      	b.n	8006042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800603c:	f04f 33ff 	mov.w	r3, #4294967295
 8006040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006042:	69bb      	ldr	r3, [r7, #24]
	}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006064:	440b      	add	r3, r1
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f023 0307 	bic.w	r3, r3, #7
 8006072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	b672      	cpsid	i
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	b662      	cpsie	i
 8006092:	617b      	str	r3, [r7, #20]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01f      	beq.n	80060de <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e012      	b.n	80060ca <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	7819      	ldrb	r1, [r3, #0]
 80060ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	3334      	adds	r3, #52	; 0x34
 80060b4:	460a      	mov	r2, r1
 80060b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d006      	beq.n	80060d2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	3301      	adds	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d9e9      	bls.n	80060a4 <prvInitialiseNewTask+0x58>
 80060d0:	e000      	b.n	80060d4 <prvInitialiseNewTask+0x88>
			{
				break;
 80060d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060dc:	e003      	b.n	80060e6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b06      	cmp	r3, #6
 80060ea:	d901      	bls.n	80060f0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060ec:	2306      	movs	r3, #6
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2200      	movs	r2, #0
 8006100:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	3304      	adds	r3, #4
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff f86c 	bl	80051e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	3318      	adds	r3, #24
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff f867 	bl	80051e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f1c3 0207 	rsb	r2, r3, #7
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	2200      	movs	r2, #0
 8006130:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	68f9      	ldr	r1, [r7, #12]
 800613e:	69b8      	ldr	r0, [r7, #24]
 8006140:	f000 ff00 	bl	8006f44 <pxPortInitialiseStack>
 8006144:	4602      	mov	r2, r0
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006156:	bf00      	nop
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006168:	f000 fff8 	bl	800715c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800616c:	4b2a      	ldr	r3, [pc, #168]	; (8006218 <prvAddNewTaskToReadyList+0xb8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	4a29      	ldr	r2, [pc, #164]	; (8006218 <prvAddNewTaskToReadyList+0xb8>)
 8006174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006176:	4b29      	ldr	r3, [pc, #164]	; (800621c <prvAddNewTaskToReadyList+0xbc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800617e:	4a27      	ldr	r2, [pc, #156]	; (800621c <prvAddNewTaskToReadyList+0xbc>)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006184:	4b24      	ldr	r3, [pc, #144]	; (8006218 <prvAddNewTaskToReadyList+0xb8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d110      	bne.n	80061ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800618c:	f000 fbda 	bl	8006944 <prvInitialiseTaskLists>
 8006190:	e00d      	b.n	80061ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006192:	4b23      	ldr	r3, [pc, #140]	; (8006220 <prvAddNewTaskToReadyList+0xc0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <prvAddNewTaskToReadyList+0xbc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d802      	bhi.n	80061ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061a8:	4a1c      	ldr	r2, [pc, #112]	; (800621c <prvAddNewTaskToReadyList+0xbc>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <prvAddNewTaskToReadyList+0xc4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <prvAddNewTaskToReadyList+0xc4>)
 80061b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	2201      	movs	r2, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	4b19      	ldr	r3, [pc, #100]	; (8006228 <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <prvAddNewTaskToReadyList+0xc8>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4a15      	ldr	r2, [pc, #84]	; (800622c <prvAddNewTaskToReadyList+0xcc>)
 80061d8:	441a      	add	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3304      	adds	r3, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4610      	mov	r0, r2
 80061e2:	f7ff f80c 	bl	80051fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061e6:	f000 ffed 	bl	80071c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <prvAddNewTaskToReadyList+0xc0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <prvAddNewTaskToReadyList+0xbc>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d207      	bcs.n	8006210 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <prvAddNewTaskToReadyList+0xd0>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000c6c 	.word	0x20000c6c
 800621c:	20000b6c 	.word	0x20000b6c
 8006220:	20000c78 	.word	0x20000c78
 8006224:	20000c88 	.word	0x20000c88
 8006228:	20000c74 	.word	0x20000c74
 800622c:	20000b70 	.word	0x20000b70
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d019      	beq.n	800627a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <vTaskDelay+0x64>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <vTaskDelay+0x34>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	b672      	cpsid	i
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	b662      	cpsie	i
 8006262:	60bb      	str	r3, [r7, #8]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006268:	f000 f87e 	bl	8006368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800626c:	2100      	movs	r1, #0
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fe02 	bl	8006e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006274:	f000 f886 	bl	8006384 <xTaskResumeAll>
 8006278:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <vTaskDelay+0x68>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000c94 	.word	0x20000c94
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ae:	463a      	mov	r2, r7
 80062b0:	1d39      	adds	r1, r7, #4
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa f99c 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	9202      	str	r2, [sp, #8]
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	460a      	mov	r2, r1
 80062ce:	4920      	ldr	r1, [pc, #128]	; (8006350 <vTaskStartScheduler+0xb0>)
 80062d0:	4820      	ldr	r0, [pc, #128]	; (8006354 <vTaskStartScheduler+0xb4>)
 80062d2:	f7ff fe13 	bl	8005efc <xTaskCreateStatic>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <vTaskStartScheduler+0xb8>)
 80062da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <vTaskStartScheduler+0xb8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e001      	b.n	80062ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d118      	bne.n	8006326 <vTaskStartScheduler+0x86>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	b672      	cpsid	i
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	b662      	cpsie	i
 8006308:	613b      	str	r3, [r7, #16]
}
 800630a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800630c:	4b13      	ldr	r3, [pc, #76]	; (800635c <vTaskStartScheduler+0xbc>)
 800630e:	f04f 32ff 	mov.w	r2, #4294967295
 8006312:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006314:	4b12      	ldr	r3, [pc, #72]	; (8006360 <vTaskStartScheduler+0xc0>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <vTaskStartScheduler+0xc4>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006320:	f000 fe9e 	bl	8007060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006324:	e010      	b.n	8006348 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d10c      	bne.n	8006348 <vTaskStartScheduler+0xa8>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	b672      	cpsid	i
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	b662      	cpsie	i
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vTaskStartScheduler+0xa6>
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08008a60 	.word	0x08008a60
 8006354:	08006915 	.word	0x08006915
 8006358:	20000c90 	.word	0x20000c90
 800635c:	20000c8c 	.word	0x20000c8c
 8006360:	20000c78 	.word	0x20000c78
 8006364:	20000c70 	.word	0x20000c70

08006368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800636c:	4b04      	ldr	r3, [pc, #16]	; (8006380 <vTaskSuspendAll+0x18>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a03      	ldr	r2, [pc, #12]	; (8006380 <vTaskSuspendAll+0x18>)
 8006374:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000c94 	.word	0x20000c94

08006384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006392:	4b42      	ldr	r3, [pc, #264]	; (800649c <xTaskResumeAll+0x118>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10c      	bne.n	80063b4 <xTaskResumeAll+0x30>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	b672      	cpsid	i
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	b662      	cpsie	i
 80063ae:	603b      	str	r3, [r7, #0]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063b4:	f000 fed2 	bl	800715c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063b8:	4b38      	ldr	r3, [pc, #224]	; (800649c <xTaskResumeAll+0x118>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3b01      	subs	r3, #1
 80063be:	4a37      	ldr	r2, [pc, #220]	; (800649c <xTaskResumeAll+0x118>)
 80063c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c2:	4b36      	ldr	r3, [pc, #216]	; (800649c <xTaskResumeAll+0x118>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d161      	bne.n	800648e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063ca:	4b35      	ldr	r3, [pc, #212]	; (80064a0 <xTaskResumeAll+0x11c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d05d      	beq.n	800648e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063d2:	e02e      	b.n	8006432 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d4:	4b33      	ldr	r3, [pc, #204]	; (80064a4 <xTaskResumeAll+0x120>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3318      	adds	r3, #24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe ff69 	bl	80052b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe ff64 	bl	80052b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	2201      	movs	r2, #1
 80063f6:	409a      	lsls	r2, r3
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <xTaskResumeAll+0x124>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <xTaskResumeAll+0x124>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4a27      	ldr	r2, [pc, #156]	; (80064ac <xTaskResumeAll+0x128>)
 8006410:	441a      	add	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fe fef0 	bl	80051fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <xTaskResumeAll+0x12c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	429a      	cmp	r2, r3
 800642a:	d302      	bcc.n	8006432 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800642c:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <xTaskResumeAll+0x130>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006432:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <xTaskResumeAll+0x120>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1cc      	bne.n	80063d4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006440:	f000 fb20 	bl	8006a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006444:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <xTaskResumeAll+0x134>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006450:	f000 f836 	bl	80064c0 <xTaskIncrementTick>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800645a:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <xTaskResumeAll+0x130>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f1      	bne.n	8006450 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <xTaskResumeAll+0x134>)
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <xTaskResumeAll+0x130>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800647a:	2301      	movs	r3, #1
 800647c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <xTaskResumeAll+0x138>)
 8006480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800648e:	f000 fe99 	bl	80071c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006492:	68bb      	ldr	r3, [r7, #8]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000c94 	.word	0x20000c94
 80064a0:	20000c6c 	.word	0x20000c6c
 80064a4:	20000c2c 	.word	0x20000c2c
 80064a8:	20000c74 	.word	0x20000c74
 80064ac:	20000b70 	.word	0x20000b70
 80064b0:	20000b6c 	.word	0x20000b6c
 80064b4:	20000c80 	.word	0x20000c80
 80064b8:	20000c7c 	.word	0x20000c7c
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ca:	4b4f      	ldr	r3, [pc, #316]	; (8006608 <xTaskIncrementTick+0x148>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f040 808a 	bne.w	80065e8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064d4:	4b4d      	ldr	r3, [pc, #308]	; (800660c <xTaskIncrementTick+0x14c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3301      	adds	r3, #1
 80064da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064dc:	4a4b      	ldr	r2, [pc, #300]	; (800660c <xTaskIncrementTick+0x14c>)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d122      	bne.n	800652e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80064e8:	4b49      	ldr	r3, [pc, #292]	; (8006610 <xTaskIncrementTick+0x150>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00c      	beq.n	800650c <xTaskIncrementTick+0x4c>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	b672      	cpsid	i
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	b662      	cpsie	i
 8006506:	603b      	str	r3, [r7, #0]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <xTaskIncrementTick+0x4a>
 800650c:	4b40      	ldr	r3, [pc, #256]	; (8006610 <xTaskIncrementTick+0x150>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	4b40      	ldr	r3, [pc, #256]	; (8006614 <xTaskIncrementTick+0x154>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a3e      	ldr	r2, [pc, #248]	; (8006610 <xTaskIncrementTick+0x150>)
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	4a3e      	ldr	r2, [pc, #248]	; (8006614 <xTaskIncrementTick+0x154>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	4b3d      	ldr	r3, [pc, #244]	; (8006618 <xTaskIncrementTick+0x158>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	4a3c      	ldr	r2, [pc, #240]	; (8006618 <xTaskIncrementTick+0x158>)
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	f000 faab 	bl	8006a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <xTaskIncrementTick+0x15c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	429a      	cmp	r2, r3
 8006536:	d348      	bcc.n	80065ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006538:	4b35      	ldr	r3, [pc, #212]	; (8006610 <xTaskIncrementTick+0x150>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006542:	4b36      	ldr	r3, [pc, #216]	; (800661c <xTaskIncrementTick+0x15c>)
 8006544:	f04f 32ff 	mov.w	r2, #4294967295
 8006548:	601a      	str	r2, [r3, #0]
					break;
 800654a:	e03e      	b.n	80065ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654c:	4b30      	ldr	r3, [pc, #192]	; (8006610 <xTaskIncrementTick+0x150>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d203      	bcs.n	800656c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006564:	4a2d      	ldr	r2, [pc, #180]	; (800661c <xTaskIncrementTick+0x15c>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800656a:	e02e      	b.n	80065ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fea1 	bl	80052b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3318      	adds	r3, #24
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fe98 	bl	80052b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2201      	movs	r2, #1
 800658e:	409a      	lsls	r2, r3
 8006590:	4b23      	ldr	r3, [pc, #140]	; (8006620 <xTaskIncrementTick+0x160>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4313      	orrs	r3, r2
 8006596:	4a22      	ldr	r2, [pc, #136]	; (8006620 <xTaskIncrementTick+0x160>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <xTaskIncrementTick+0x164>)
 80065a8:	441a      	add	r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7fe fe24 	bl	80051fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <xTaskIncrementTick+0x168>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d3b9      	bcc.n	8006538 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065c8:	e7b6      	b.n	8006538 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <xTaskIncrementTick+0x168>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4914      	ldr	r1, [pc, #80]	; (8006624 <xTaskIncrementTick+0x164>)
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d907      	bls.n	80065f2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80065e2:	2301      	movs	r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e004      	b.n	80065f2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <xTaskIncrementTick+0x16c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	4a0f      	ldr	r2, [pc, #60]	; (800662c <xTaskIncrementTick+0x16c>)
 80065f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <xTaskIncrementTick+0x170>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80065fa:	2301      	movs	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065fe:	697b      	ldr	r3, [r7, #20]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000c94 	.word	0x20000c94
 800660c:	20000c70 	.word	0x20000c70
 8006610:	20000c24 	.word	0x20000c24
 8006614:	20000c28 	.word	0x20000c28
 8006618:	20000c84 	.word	0x20000c84
 800661c:	20000c8c 	.word	0x20000c8c
 8006620:	20000c74 	.word	0x20000c74
 8006624:	20000b70 	.word	0x20000b70
 8006628:	20000b6c 	.word	0x20000b6c
 800662c:	20000c7c 	.word	0x20000c7c
 8006630:	20000c80 	.word	0x20000c80

08006634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800663a:	4b28      	ldr	r3, [pc, #160]	; (80066dc <vTaskSwitchContext+0xa8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006642:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <vTaskSwitchContext+0xac>)
 8006644:	2201      	movs	r2, #1
 8006646:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006648:	e041      	b.n	80066ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800664a:	4b25      	ldr	r3, [pc, #148]	; (80066e0 <vTaskSwitchContext+0xac>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006650:	4b24      	ldr	r3, [pc, #144]	; (80066e4 <vTaskSwitchContext+0xb0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	fab3 f383 	clz	r3, r3
 800665c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	f1c3 031f 	rsb	r3, r3, #31
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	4920      	ldr	r1, [pc, #128]	; (80066e8 <vTaskSwitchContext+0xb4>)
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10c      	bne.n	8006694 <vTaskSwitchContext+0x60>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	b672      	cpsid	i
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	b662      	cpsie	i
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vTaskSwitchContext+0x5e>
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <vTaskSwitchContext+0xb4>)
 80066a0:	4413      	add	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3308      	adds	r3, #8
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d104      	bne.n	80066c4 <vTaskSwitchContext+0x90>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	4a08      	ldr	r2, [pc, #32]	; (80066ec <vTaskSwitchContext+0xb8>)
 80066cc:	6013      	str	r3, [r2, #0]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000c94 	.word	0x20000c94
 80066e0:	20000c80 	.word	0x20000c80
 80066e4:	20000c74 	.word	0x20000c74
 80066e8:	20000b70 	.word	0x20000b70
 80066ec:	20000b6c 	.word	0x20000b6c

080066f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	b672      	cpsid	i
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	b662      	cpsie	i
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <vTaskPlaceOnEventList+0x48>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3318      	adds	r3, #24
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fe fd8f 	bl	8005246 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006728:	2101      	movs	r1, #1
 800672a:	6838      	ldr	r0, [r7, #0]
 800672c:	f000 fba4 	bl	8006e78 <prvAddCurrentTaskToDelayedList>
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000b6c 	.word	0x20000b6c

0800673c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10c      	bne.n	800676c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	b672      	cpsid	i
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	b662      	cpsie	i
 8006766:	60fb      	str	r3, [r7, #12]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3318      	adds	r3, #24
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe fda1 	bl	80052b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <xTaskRemoveFromEventList+0xb0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11c      	bne.n	80067b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3304      	adds	r3, #4
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fd98 	bl	80052b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	2201      	movs	r2, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <xTaskRemoveFromEventList+0xb4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4313      	orrs	r3, r2
 8006796:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <xTaskRemoveFromEventList+0xb4>)
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <xTaskRemoveFromEventList+0xb8>)
 80067a8:	441a      	add	r2, r3
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fe fd24 	bl	80051fe <vListInsertEnd>
 80067b6:	e005      	b.n	80067c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3318      	adds	r3, #24
 80067bc:	4619      	mov	r1, r3
 80067be:	480e      	ldr	r0, [pc, #56]	; (80067f8 <xTaskRemoveFromEventList+0xbc>)
 80067c0:	f7fe fd1d 	bl	80051fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <xTaskRemoveFromEventList+0xc0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d905      	bls.n	80067de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067d6:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <xTaskRemoveFromEventList+0xc4>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e001      	b.n	80067e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000c94 	.word	0x20000c94
 80067f0:	20000c74 	.word	0x20000c74
 80067f4:	20000b70 	.word	0x20000b70
 80067f8:	20000c2c 	.word	0x20000c2c
 80067fc:	20000b6c 	.word	0x20000b6c
 8006800:	20000c80 	.word	0x20000c80

08006804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <vTaskInternalSetTimeOutState+0x24>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <vTaskInternalSetTimeOutState+0x28>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	605a      	str	r2, [r3, #4]
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	20000c84 	.word	0x20000c84
 800682c:	20000c70 	.word	0x20000c70

08006830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	b672      	cpsid	i
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	b662      	cpsie	i
 8006854:	613b      	str	r3, [r7, #16]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10c      	bne.n	800687a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	b672      	cpsid	i
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	b662      	cpsie	i
 8006874:	60fb      	str	r3, [r7, #12]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800687a:	f000 fc6f 	bl	800715c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800687e:	4b1d      	ldr	r3, [pc, #116]	; (80068f4 <xTaskCheckForTimeOut+0xc4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d102      	bne.n	800689e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006898:	2300      	movs	r3, #0
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	e023      	b.n	80068e6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <xTaskCheckForTimeOut+0xc8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d007      	beq.n	80068ba <xTaskCheckForTimeOut+0x8a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d302      	bcc.n	80068ba <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e015      	b.n	80068e6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d20b      	bcs.n	80068dc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ff97 	bl	8006804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	e004      	b.n	80068e6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068e2:	2301      	movs	r3, #1
 80068e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068e6:	f000 fc6d 	bl	80071c4 <vPortExitCritical>

	return xReturn;
 80068ea:	69fb      	ldr	r3, [r7, #28]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000c70 	.word	0x20000c70
 80068f8:	20000c84 	.word	0x20000c84

080068fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006900:	4b03      	ldr	r3, [pc, #12]	; (8006910 <vTaskMissedYield+0x14>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
}
 8006906:	bf00      	nop
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	20000c80 	.word	0x20000c80

08006914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800691c:	f000 f852 	bl	80069c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <prvIdleTask+0x28>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d9f9      	bls.n	800691c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <prvIdleTask+0x2c>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006938:	e7f0      	b.n	800691c <prvIdleTask+0x8>
 800693a:	bf00      	nop
 800693c:	20000b70 	.word	0x20000b70
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800694a:	2300      	movs	r3, #0
 800694c:	607b      	str	r3, [r7, #4]
 800694e:	e00c      	b.n	800696a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4a12      	ldr	r2, [pc, #72]	; (80069a4 <prvInitialiseTaskLists+0x60>)
 800695c:	4413      	add	r3, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fc20 	bl	80051a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3301      	adds	r3, #1
 8006968:	607b      	str	r3, [r7, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b06      	cmp	r3, #6
 800696e:	d9ef      	bls.n	8006950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006970:	480d      	ldr	r0, [pc, #52]	; (80069a8 <prvInitialiseTaskLists+0x64>)
 8006972:	f7fe fc17 	bl	80051a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006976:	480d      	ldr	r0, [pc, #52]	; (80069ac <prvInitialiseTaskLists+0x68>)
 8006978:	f7fe fc14 	bl	80051a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800697c:	480c      	ldr	r0, [pc, #48]	; (80069b0 <prvInitialiseTaskLists+0x6c>)
 800697e:	f7fe fc11 	bl	80051a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006982:	480c      	ldr	r0, [pc, #48]	; (80069b4 <prvInitialiseTaskLists+0x70>)
 8006984:	f7fe fc0e 	bl	80051a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006988:	480b      	ldr	r0, [pc, #44]	; (80069b8 <prvInitialiseTaskLists+0x74>)
 800698a:	f7fe fc0b 	bl	80051a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800698e:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <prvInitialiseTaskLists+0x78>)
 8006990:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <prvInitialiseTaskLists+0x64>)
 8006992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <prvInitialiseTaskLists+0x7c>)
 8006996:	4a05      	ldr	r2, [pc, #20]	; (80069ac <prvInitialiseTaskLists+0x68>)
 8006998:	601a      	str	r2, [r3, #0]
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000b70 	.word	0x20000b70
 80069a8:	20000bfc 	.word	0x20000bfc
 80069ac:	20000c10 	.word	0x20000c10
 80069b0:	20000c2c 	.word	0x20000c2c
 80069b4:	20000c40 	.word	0x20000c40
 80069b8:	20000c58 	.word	0x20000c58
 80069bc:	20000c24 	.word	0x20000c24
 80069c0:	20000c28 	.word	0x20000c28

080069c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069ca:	e019      	b.n	8006a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069cc:	f000 fbc6 	bl	800715c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d0:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <prvCheckTasksWaitingTermination+0x50>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fe fc6b 	bl	80052b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069e2:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <prvCheckTasksWaitingTermination+0x54>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4a0b      	ldr	r2, [pc, #44]	; (8006a18 <prvCheckTasksWaitingTermination+0x54>)
 80069ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <prvCheckTasksWaitingTermination+0x58>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <prvCheckTasksWaitingTermination+0x58>)
 80069f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069f6:	f000 fbe5 	bl	80071c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f810 	bl	8006a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <prvCheckTasksWaitingTermination+0x58>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e1      	bne.n	80069cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000c40 	.word	0x20000c40
 8006a18:	20000c6c 	.word	0x20000c6c
 8006a1c:	20000c54 	.word	0x20000c54

08006a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d108      	bne.n	8006a44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fd86 	bl	8007548 <vPortFree>
				vPortFree( pxTCB );
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fd83 	bl	8007548 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a42:	e01a      	b.n	8006a7a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d103      	bne.n	8006a56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fd7a 	bl	8007548 <vPortFree>
	}
 8006a54:	e011      	b.n	8006a7a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d00c      	beq.n	8006a7a <prvDeleteTCB+0x5a>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	b672      	cpsid	i
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	b662      	cpsie	i
 8006a74:	60fb      	str	r3, [r7, #12]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <prvDeleteTCB+0x58>
	}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <prvResetNextTaskUnblockTime+0x38>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a9c:	e008      	b.n	8006ab0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <prvResetNextTaskUnblockTime+0x38>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a04      	ldr	r2, [pc, #16]	; (8006ac0 <prvResetNextTaskUnblockTime+0x3c>)
 8006aae:	6013      	str	r3, [r2, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000c24 	.word	0x20000c24
 8006ac0:	20000c8c 	.word	0x20000c8c

08006ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <xTaskGetSchedulerState+0x34>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	e008      	b.n	8006aea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad8:	4b08      	ldr	r3, [pc, #32]	; (8006afc <xTaskGetSchedulerState+0x38>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	607b      	str	r3, [r7, #4]
 8006ae4:	e001      	b.n	8006aea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aea:	687b      	ldr	r3, [r7, #4]
	}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000c78 	.word	0x20000c78
 8006afc:	20000c94 	.word	0x20000c94

08006b00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d069      	beq.n	8006bea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <xTaskPriorityInherit+0xf4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d259      	bcs.n	8006bd8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	db06      	blt.n	8006b3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b2c:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <xTaskPriorityInherit+0xf4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	f1c3 0207 	rsb	r2, r3, #7
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6959      	ldr	r1, [r3, #20]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4a2b      	ldr	r2, [pc, #172]	; (8006bf8 <xTaskPriorityInherit+0xf8>)
 8006b4c:	4413      	add	r3, r2
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	d13a      	bne.n	8006bc8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fbae 	bl	80052b8 <uxListRemove>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d115      	bne.n	8006b8e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	4924      	ldr	r1, [pc, #144]	; (8006bf8 <xTaskPriorityInherit+0xf8>)
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xTaskPriorityInherit+0x8e>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43da      	mvns	r2, r3
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <xTaskPriorityInherit+0xfc>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <xTaskPriorityInherit+0xfc>)
 8006b8c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b8e:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <xTaskPriorityInherit+0xf4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	4b16      	ldr	r3, [pc, #88]	; (8006bfc <xTaskPriorityInherit+0xfc>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	4a15      	ldr	r2, [pc, #84]	; (8006bfc <xTaskPriorityInherit+0xfc>)
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <xTaskPriorityInherit+0xf8>)
 8006bb8:	441a      	add	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7fe fb1c 	bl	80051fe <vListInsertEnd>
 8006bc6:	e004      	b.n	8006bd2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <xTaskPriorityInherit+0xf4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e008      	b.n	8006bea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <xTaskPriorityInherit+0xf4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d201      	bcs.n	8006bea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006be6:	2301      	movs	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bea:	68fb      	ldr	r3, [r7, #12]
	}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000b6c 	.word	0x20000b6c
 8006bf8:	20000b70 	.word	0x20000b70
 8006bfc:	20000c74 	.word	0x20000c74

08006c00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d072      	beq.n	8006cfc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c16:	4b3c      	ldr	r3, [pc, #240]	; (8006d08 <xTaskPriorityDisinherit+0x108>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d00c      	beq.n	8006c3a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10c      	bne.n	8006c5c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	b672      	cpsid	i
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	b662      	cpsie	i
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d044      	beq.n	8006cfc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d140      	bne.n	8006cfc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fb1a 	bl	80052b8 <uxListRemove>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d115      	bne.n	8006cb6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	491f      	ldr	r1, [pc, #124]	; (8006d0c <xTaskPriorityDisinherit+0x10c>)
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xTaskPriorityDisinherit+0xb6>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43da      	mvns	r2, r3
 8006cac:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <xTaskPriorityDisinherit+0x110>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <xTaskPriorityDisinherit+0x110>)
 8006cb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	f1c3 0207 	rsb	r2, r3, #7
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	2201      	movs	r2, #1
 8006cd0:	409a      	lsls	r2, r3
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <xTaskPriorityDisinherit+0x110>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <xTaskPriorityDisinherit+0x110>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <xTaskPriorityDisinherit+0x10c>)
 8006cea:	441a      	add	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fe fa83 	bl	80051fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cfc:	697b      	ldr	r3, [r7, #20]
	}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000b6c 	.word	0x20000b6c
 8006d0c:	20000b70 	.word	0x20000b70
 8006d10:	20000c74 	.word	0x20000c74

08006d14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8087 	beq.w	8006e3c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	b672      	cpsid	i
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	b662      	cpsie	i
 8006d4a:	60fb      	str	r3, [r7, #12]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d902      	bls.n	8006d60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e002      	b.n	8006d66 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d065      	beq.n	8006e3c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d160      	bne.n	8006e3c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d7a:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d10c      	bne.n	8006d9e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	b672      	cpsid	i
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	b662      	cpsie	i
 8006d98:	60bb      	str	r3, [r7, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	db04      	blt.n	8006dbc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f1c3 0207 	rsb	r2, r3, #7
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	6959      	ldr	r1, [r3, #20]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4a1f      	ldr	r2, [pc, #124]	; (8006e48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006dcc:	4413      	add	r3, r2
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d134      	bne.n	8006e3c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fa6e 	bl	80052b8 <uxListRemove>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d115      	bne.n	8006e0e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de6:	4918      	ldr	r1, [pc, #96]	; (8006e48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43da      	mvns	r2, r3
 8006e04:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006e0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	2201      	movs	r2, #1
 8006e14:	409a      	lsls	r2, r3
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	4a0b      	ldr	r2, [pc, #44]	; (8006e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a06      	ldr	r2, [pc, #24]	; (8006e48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe f9e1 	bl	80051fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e3c:	bf00      	nop
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000b6c 	.word	0x20000b6c
 8006e48:	20000b70 	.word	0x20000b70
 8006e4c:	20000c74 	.word	0x20000c74

08006e50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e62:	3201      	adds	r2, #1
 8006e64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006e66:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e68:	681b      	ldr	r3, [r3, #0]
	}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	20000b6c 	.word	0x20000b6c

08006e78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e82:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e88:	4b28      	ldr	r3, [pc, #160]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fa12 	bl	80052b8 <uxListRemove>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4013      	ands	r3, r2
 8006eae:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d10a      	bne.n	8006ed0 <prvAddCurrentTaskToDelayedList+0x58>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	481a      	ldr	r0, [pc, #104]	; (8006f34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006eca:	f7fe f998 	bl	80051fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ece:	e026      	b.n	8006f1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ed8:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d209      	bcs.n	8006efc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee8:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f7fe f9a6 	bl	8005246 <vListInsert>
}
 8006efa:	e010      	b.n	8006f1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efc:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4619      	mov	r1, r3
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7fe f99c 	bl	8005246 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d202      	bcs.n	8006f1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6013      	str	r3, [r2, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000c70 	.word	0x20000c70
 8006f2c:	20000b6c 	.word	0x20000b6c
 8006f30:	20000c74 	.word	0x20000c74
 8006f34:	20000c58 	.word	0x20000c58
 8006f38:	20000c28 	.word	0x20000c28
 8006f3c:	20000c24 	.word	0x20000c24
 8006f40:	20000c8c 	.word	0x20000c8c

08006f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b04      	subs	r3, #4
 8006f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3b04      	subs	r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f023 0201 	bic.w	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f74:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <pxPortInitialiseStack+0x64>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3b14      	subs	r3, #20
 8006f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f06f 0202 	mvn.w	r2, #2
 8006f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b20      	subs	r3, #32
 8006f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	08006fad 	.word	0x08006fad

08006fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <prvTaskExitError+0x5c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d00c      	beq.n	8006fda <prvTaskExitError+0x2e>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	60fb      	str	r3, [r7, #12]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <prvTaskExitError+0x2c>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	b672      	cpsid	i
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	b662      	cpsie	i
 8006fee:	60bb      	str	r3, [r7, #8]
}
 8006ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ff2:	bf00      	nop
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0fc      	beq.n	8006ff4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	2000000c 	.word	0x2000000c
 800700c:	00000000 	.word	0x00000000

08007010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <pxCurrentTCBConst2>)
 8007012:	6819      	ldr	r1, [r3, #0]
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	f380 8809 	msr	PSP, r0
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	4770      	bx	lr
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst2>:
 8007030:	20000b6c 	.word	0x20000b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007038:	4808      	ldr	r0, [pc, #32]	; (800705c <prvPortStartFirstTask+0x24>)
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	6800      	ldr	r0, [r0, #0]
 800703e:	f380 8808 	msr	MSP, r0
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8814 	msr	CONTROL, r0
 800704a:	b662      	cpsie	i
 800704c:	b661      	cpsie	f
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	df00      	svc	0
 8007058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800705a:	bf00      	nop
 800705c:	e000ed08 	.word	0xe000ed08

08007060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007066:	4b37      	ldr	r3, [pc, #220]	; (8007144 <xPortStartScheduler+0xe4>)
 8007068:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007088:	b2da      	uxtb	r2, r3
 800708a:	4b2f      	ldr	r3, [pc, #188]	; (8007148 <xPortStartScheduler+0xe8>)
 800708c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <xPortStartScheduler+0xec>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007094:	e009      	b.n	80070aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007096:	4b2d      	ldr	r3, [pc, #180]	; (800714c <xPortStartScheduler+0xec>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3b01      	subs	r3, #1
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <xPortStartScheduler+0xec>)
 800709e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d0ef      	beq.n	8007096 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070b6:	4b25      	ldr	r3, [pc, #148]	; (800714c <xPortStartScheduler+0xec>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1c3 0307 	rsb	r3, r3, #7
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d00c      	beq.n	80070dc <xPortStartScheduler+0x7c>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	b672      	cpsid	i
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	b662      	cpsie	i
 80070d6:	60bb      	str	r3, [r7, #8]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070dc:	4b1b      	ldr	r3, [pc, #108]	; (800714c <xPortStartScheduler+0xec>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	4a1a      	ldr	r2, [pc, #104]	; (800714c <xPortStartScheduler+0xec>)
 80070e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <xPortStartScheduler+0xec>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ee:	4a17      	ldr	r2, [pc, #92]	; (800714c <xPortStartScheduler+0xec>)
 80070f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <xPortStartScheduler+0xf0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a14      	ldr	r2, [pc, #80]	; (8007150 <xPortStartScheduler+0xf0>)
 8007100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007104:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007106:	4b12      	ldr	r3, [pc, #72]	; (8007150 <xPortStartScheduler+0xf0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a11      	ldr	r2, [pc, #68]	; (8007150 <xPortStartScheduler+0xf0>)
 800710c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007110:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007112:	f000 f8dd 	bl	80072d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <xPortStartScheduler+0xf4>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800711c:	f000 f8fc 	bl	8007318 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <xPortStartScheduler+0xf8>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a0c      	ldr	r2, [pc, #48]	; (8007158 <xPortStartScheduler+0xf8>)
 8007126:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800712a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800712c:	f7ff ff84 	bl	8007038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007130:	f7ff fa80 	bl	8006634 <vTaskSwitchContext>
	prvTaskExitError();
 8007134:	f7ff ff3a 	bl	8006fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	e000e400 	.word	0xe000e400
 8007148:	20000c98 	.word	0x20000c98
 800714c:	20000c9c 	.word	0x20000c9c
 8007150:	e000ed20 	.word	0xe000ed20
 8007154:	2000000c 	.word	0x2000000c
 8007158:	e000ef34 	.word	0xe000ef34

0800715c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	607b      	str	r3, [r7, #4]
}
 8007178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <vPortEnterCritical+0x60>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3301      	adds	r3, #1
 8007180:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <vPortEnterCritical+0x60>)
 8007182:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007184:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <vPortEnterCritical+0x60>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d111      	bne.n	80071b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <vPortEnterCritical+0x64>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <vPortEnterCritical+0x54>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	b672      	cpsid	i
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	b662      	cpsie	i
 80071aa:	603b      	str	r3, [r7, #0]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <vPortEnterCritical+0x52>
	}
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	2000000c 	.word	0x2000000c
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ca:	4b13      	ldr	r3, [pc, #76]	; (8007218 <vPortExitCritical+0x54>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10c      	bne.n	80071ec <vPortExitCritical+0x28>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	b672      	cpsid	i
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	b662      	cpsie	i
 80071e6:	607b      	str	r3, [r7, #4]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80071ec:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <vPortExitCritical+0x54>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	4a09      	ldr	r2, [pc, #36]	; (8007218 <vPortExitCritical+0x54>)
 80071f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071f6:	4b08      	ldr	r3, [pc, #32]	; (8007218 <vPortExitCritical+0x54>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <vPortExitCritical+0x46>
 80071fe:	2300      	movs	r3, #0
 8007200:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	f383 8811 	msr	BASEPRI, r3
}
 8007208:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	2000000c 	.word	0x2000000c
 800721c:	00000000 	.word	0x00000000

08007220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007220:	f3ef 8009 	mrs	r0, PSP
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <pxCurrentTCBConst>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f01e 0f10 	tst.w	lr, #16
 8007230:	bf08      	it	eq
 8007232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007244:	b672      	cpsid	i
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	b662      	cpsie	i
 8007254:	f7ff f9ee 	bl	8006634 <vTaskSwitchContext>
 8007258:	f04f 0000 	mov.w	r0, #0
 800725c:	f380 8811 	msr	BASEPRI, r0
 8007260:	bc09      	pop	{r0, r3}
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f01e 0f10 	tst.w	lr, #16
 800726e:	bf08      	it	eq
 8007270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007274:	f380 8809 	msr	PSP, r0
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <pxCurrentTCBConst>:
 8007280:	20000b6c 	.word	0x20000b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	607b      	str	r3, [r7, #4]
}
 80072a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072a6:	f7ff f90b 	bl	80064c0 <xTaskIncrementTick>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <SysTick_Handler+0x44>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	2300      	movs	r3, #0
 80072ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f383 8811 	msr	BASEPRI, r3
}
 80072c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	e000ed04 	.word	0xe000ed04

080072d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <vPortSetupTimerInterrupt+0x34>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <vPortSetupTimerInterrupt+0x38>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vPortSetupTimerInterrupt+0x3c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <vPortSetupTimerInterrupt+0x40>)
 80072e6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ea:	099b      	lsrs	r3, r3, #6
 80072ec:	4a09      	ldr	r2, [pc, #36]	; (8007314 <vPortSetupTimerInterrupt+0x44>)
 80072ee:	3b01      	subs	r3, #1
 80072f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072f2:	4b04      	ldr	r3, [pc, #16]	; (8007304 <vPortSetupTimerInterrupt+0x34>)
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]
}
 80072f8:	bf00      	nop
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	e000e010 	.word	0xe000e010
 8007308:	e000e018 	.word	0xe000e018
 800730c:	20000000 	.word	0x20000000
 8007310:	10624dd3 	.word	0x10624dd3
 8007314:	e000e014 	.word	0xe000e014

08007318 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007318:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007328 <vPortEnableVFP+0x10>
 800731c:	6801      	ldr	r1, [r0, #0]
 800731e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007322:	6001      	str	r1, [r0, #0]
 8007324:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007326:	bf00      	nop
 8007328:	e000ed88 	.word	0xe000ed88

0800732c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007332:	f3ef 8305 	mrs	r3, IPSR
 8007336:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b0f      	cmp	r3, #15
 800733c:	d916      	bls.n	800736c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800733e:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <vPortValidateInterruptPriority+0x78>)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007348:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <vPortValidateInterruptPriority+0x7c>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	7afa      	ldrb	r2, [r7, #11]
 800734e:	429a      	cmp	r2, r3
 8007350:	d20c      	bcs.n	800736c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	b672      	cpsid	i
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	b662      	cpsie	i
 8007366:	607b      	str	r3, [r7, #4]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800736c:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <vPortValidateInterruptPriority+0x80>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007374:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <vPortValidateInterruptPriority+0x84>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d90c      	bls.n	8007396 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	b672      	cpsid	i
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	b662      	cpsie	i
 8007390:	603b      	str	r3, [r7, #0]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <vPortValidateInterruptPriority+0x68>
	}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	e000e3f0 	.word	0xe000e3f0
 80073a8:	20000c98 	.word	0x20000c98
 80073ac:	e000ed0c 	.word	0xe000ed0c
 80073b0:	20000c9c 	.word	0x20000c9c

080073b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073c0:	f7fe ffd2 	bl	8006368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073c4:	4b5b      	ldr	r3, [pc, #364]	; (8007534 <pvPortMalloc+0x180>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073cc:	f000 f91a 	bl	8007604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073d0:	4b59      	ldr	r3, [pc, #356]	; (8007538 <pvPortMalloc+0x184>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 8092 	bne.w	8007502 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01f      	beq.n	8007424 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80073e4:	2208      	movs	r2, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4413      	add	r3, r2
 80073ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d016      	beq.n	8007424 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	3308      	adds	r3, #8
 80073fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00c      	beq.n	8007424 <pvPortMalloc+0x70>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	b672      	cpsid	i
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	b662      	cpsie	i
 800741e:	617b      	str	r3, [r7, #20]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d06b      	beq.n	8007502 <pvPortMalloc+0x14e>
 800742a:	4b44      	ldr	r3, [pc, #272]	; (800753c <pvPortMalloc+0x188>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d866      	bhi.n	8007502 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007434:	4b42      	ldr	r3, [pc, #264]	; (8007540 <pvPortMalloc+0x18c>)
 8007436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007438:	4b41      	ldr	r3, [pc, #260]	; (8007540 <pvPortMalloc+0x18c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800743e:	e004      	b.n	800744a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d903      	bls.n	800745c <pvPortMalloc+0xa8>
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f1      	bne.n	8007440 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800745c:	4b35      	ldr	r3, [pc, #212]	; (8007534 <pvPortMalloc+0x180>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	429a      	cmp	r2, r3
 8007464:	d04d      	beq.n	8007502 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2208      	movs	r2, #8
 800746c:	4413      	add	r3, r2
 800746e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	2308      	movs	r3, #8
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d921      	bls.n	80074cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <pvPortMalloc+0x100>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	b672      	cpsid	i
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	b662      	cpsie	i
 80074ae:	613b      	str	r3, [r7, #16]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074c6:	69b8      	ldr	r0, [r7, #24]
 80074c8:	f000 f8fe 	bl	80076c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074cc:	4b1b      	ldr	r3, [pc, #108]	; (800753c <pvPortMalloc+0x188>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <pvPortMalloc+0x188>)
 80074d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074da:	4b18      	ldr	r3, [pc, #96]	; (800753c <pvPortMalloc+0x188>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b19      	ldr	r3, [pc, #100]	; (8007544 <pvPortMalloc+0x190>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d203      	bcs.n	80074ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074e6:	4b15      	ldr	r3, [pc, #84]	; (800753c <pvPortMalloc+0x188>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a16      	ldr	r2, [pc, #88]	; (8007544 <pvPortMalloc+0x190>)
 80074ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <pvPortMalloc+0x184>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007502:	f7fe ff3f 	bl	8006384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <pvPortMalloc+0x176>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	b672      	cpsid	i
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	b662      	cpsie	i
 8007524:	60fb      	str	r3, [r7, #12]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <pvPortMalloc+0x174>
	return pvReturn;
 800752a:	69fb      	ldr	r3, [r7, #28]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3728      	adds	r7, #40	; 0x28
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	200048a8 	.word	0x200048a8
 8007538:	200048b4 	.word	0x200048b4
 800753c:	200048ac 	.word	0x200048ac
 8007540:	200048a0 	.word	0x200048a0
 8007544:	200048b0 	.word	0x200048b0

08007548 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d04c      	beq.n	80075f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800755a:	2308      	movs	r3, #8
 800755c:	425b      	negs	r3, r3
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <vPortFree+0xb4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4013      	ands	r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <vPortFree+0x48>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	b672      	cpsid	i
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	b662      	cpsie	i
 800758a:	60fb      	str	r3, [r7, #12]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <vPortFree+0x6a>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	b672      	cpsid	i
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	b662      	cpsie	i
 80075ac:	60bb      	str	r3, [r7, #8]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	4b11      	ldr	r3, [pc, #68]	; (80075fc <vPortFree+0xb4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d019      	beq.n	80075f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d115      	bne.n	80075f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <vPortFree+0xb4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075d8:	f7fe fec6 	bl	8006368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <vPortFree+0xb8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4413      	add	r3, r2
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <vPortFree+0xb8>)
 80075e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ea:	6938      	ldr	r0, [r7, #16]
 80075ec:	f000 f86c 	bl	80076c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075f0:	f7fe fec8 	bl	8006384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075f4:	bf00      	nop
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	200048b4 	.word	0x200048b4
 8007600:	200048ac 	.word	0x200048ac

08007604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800760a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800760e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007610:	4b27      	ldr	r3, [pc, #156]	; (80076b0 <prvHeapInit+0xac>)
 8007612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3307      	adds	r3, #7
 8007622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <prvHeapInit+0xac>)
 8007634:	4413      	add	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <prvHeapInit+0xb0>)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <prvHeapInit+0xb0>)
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007650:	2208      	movs	r2, #8
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0307 	bic.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <prvHeapInit+0xb4>)
 8007664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <prvHeapInit+0xb4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <prvHeapInit+0xb4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvHeapInit+0xb4>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <prvHeapInit+0xb8>)
 8007692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <prvHeapInit+0xbc>)
 800769a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <prvHeapInit+0xc0>)
 800769e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000ca0 	.word	0x20000ca0
 80076b4:	200048a0 	.word	0x200048a0
 80076b8:	200048a8 	.word	0x200048a8
 80076bc:	200048b0 	.word	0x200048b0
 80076c0:	200048ac 	.word	0x200048ac
 80076c4:	200048b4 	.word	0x200048b4

080076c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076d0:	4b28      	ldr	r3, [pc, #160]	; (8007774 <prvInsertBlockIntoFreeList+0xac>)
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e002      	b.n	80076dc <prvInsertBlockIntoFreeList+0x14>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d8f7      	bhi.n	80076d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4413      	add	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d108      	bne.n	800770a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	441a      	add	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d118      	bne.n	8007750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <prvInsertBlockIntoFreeList+0xb0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d00d      	beq.n	8007746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	441a      	add	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e008      	b.n	8007758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <prvInsertBlockIntoFreeList+0xb0>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e003      	b.n	8007758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d002      	beq.n	8007766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200048a0 	.word	0x200048a0
 8007778:	200048a8 	.word	0x200048a8

0800777c <__errno>:
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <__errno+0x8>)
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000010 	.word	0x20000010

08007788 <__libc_init_array>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	4d0d      	ldr	r5, [pc, #52]	; (80077c0 <__libc_init_array+0x38>)
 800778c:	4c0d      	ldr	r4, [pc, #52]	; (80077c4 <__libc_init_array+0x3c>)
 800778e:	1b64      	subs	r4, r4, r5
 8007790:	10a4      	asrs	r4, r4, #2
 8007792:	2600      	movs	r6, #0
 8007794:	42a6      	cmp	r6, r4
 8007796:	d109      	bne.n	80077ac <__libc_init_array+0x24>
 8007798:	4d0b      	ldr	r5, [pc, #44]	; (80077c8 <__libc_init_array+0x40>)
 800779a:	4c0c      	ldr	r4, [pc, #48]	; (80077cc <__libc_init_array+0x44>)
 800779c:	f001 f8da 	bl	8008954 <_init>
 80077a0:	1b64      	subs	r4, r4, r5
 80077a2:	10a4      	asrs	r4, r4, #2
 80077a4:	2600      	movs	r6, #0
 80077a6:	42a6      	cmp	r6, r4
 80077a8:	d105      	bne.n	80077b6 <__libc_init_array+0x2e>
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b0:	4798      	blx	r3
 80077b2:	3601      	adds	r6, #1
 80077b4:	e7ee      	b.n	8007794 <__libc_init_array+0xc>
 80077b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ba:	4798      	blx	r3
 80077bc:	3601      	adds	r6, #1
 80077be:	e7f2      	b.n	80077a6 <__libc_init_array+0x1e>
 80077c0:	08008bf4 	.word	0x08008bf4
 80077c4:	08008bf4 	.word	0x08008bf4
 80077c8:	08008bf4 	.word	0x08008bf4
 80077cc:	08008bf8 	.word	0x08008bf8

080077d0 <__itoa>:
 80077d0:	1e93      	subs	r3, r2, #2
 80077d2:	2b22      	cmp	r3, #34	; 0x22
 80077d4:	b510      	push	{r4, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	d904      	bls.n	80077e4 <__itoa+0x14>
 80077da:	2300      	movs	r3, #0
 80077dc:	700b      	strb	r3, [r1, #0]
 80077de:	461c      	mov	r4, r3
 80077e0:	4620      	mov	r0, r4
 80077e2:	bd10      	pop	{r4, pc}
 80077e4:	2a0a      	cmp	r2, #10
 80077e6:	d109      	bne.n	80077fc <__itoa+0x2c>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	da07      	bge.n	80077fc <__itoa+0x2c>
 80077ec:	232d      	movs	r3, #45	; 0x2d
 80077ee:	700b      	strb	r3, [r1, #0]
 80077f0:	4240      	negs	r0, r0
 80077f2:	2101      	movs	r1, #1
 80077f4:	4421      	add	r1, r4
 80077f6:	f000 f871 	bl	80078dc <__utoa>
 80077fa:	e7f1      	b.n	80077e0 <__itoa+0x10>
 80077fc:	2100      	movs	r1, #0
 80077fe:	e7f9      	b.n	80077f4 <__itoa+0x24>

08007800 <itoa>:
 8007800:	f7ff bfe6 	b.w	80077d0 <__itoa>

08007804 <memcpy>:
 8007804:	440a      	add	r2, r1
 8007806:	4291      	cmp	r1, r2
 8007808:	f100 33ff 	add.w	r3, r0, #4294967295
 800780c:	d100      	bne.n	8007810 <memcpy+0xc>
 800780e:	4770      	bx	lr
 8007810:	b510      	push	{r4, lr}
 8007812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800781a:	4291      	cmp	r1, r2
 800781c:	d1f9      	bne.n	8007812 <memcpy+0xe>
 800781e:	bd10      	pop	{r4, pc}

08007820 <memset>:
 8007820:	4402      	add	r2, r0
 8007822:	4603      	mov	r3, r0
 8007824:	4293      	cmp	r3, r2
 8007826:	d100      	bne.n	800782a <memset+0xa>
 8007828:	4770      	bx	lr
 800782a:	f803 1b01 	strb.w	r1, [r3], #1
 800782e:	e7f9      	b.n	8007824 <memset+0x4>

08007830 <rand>:
 8007830:	4b16      	ldr	r3, [pc, #88]	; (800788c <rand+0x5c>)
 8007832:	b510      	push	{r4, lr}
 8007834:	681c      	ldr	r4, [r3, #0]
 8007836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007838:	b9b3      	cbnz	r3, 8007868 <rand+0x38>
 800783a:	2018      	movs	r0, #24
 800783c:	f000 f8c0 	bl	80079c0 <malloc>
 8007840:	63a0      	str	r0, [r4, #56]	; 0x38
 8007842:	b928      	cbnz	r0, 8007850 <rand+0x20>
 8007844:	4602      	mov	r2, r0
 8007846:	4b12      	ldr	r3, [pc, #72]	; (8007890 <rand+0x60>)
 8007848:	4812      	ldr	r0, [pc, #72]	; (8007894 <rand+0x64>)
 800784a:	214e      	movs	r1, #78	; 0x4e
 800784c:	f000 f888 	bl	8007960 <__assert_func>
 8007850:	4a11      	ldr	r2, [pc, #68]	; (8007898 <rand+0x68>)
 8007852:	4b12      	ldr	r3, [pc, #72]	; (800789c <rand+0x6c>)
 8007854:	e9c0 2300 	strd	r2, r3, [r0]
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <rand+0x70>)
 800785a:	6083      	str	r3, [r0, #8]
 800785c:	230b      	movs	r3, #11
 800785e:	8183      	strh	r3, [r0, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	2300      	movs	r3, #0
 8007864:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007868:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <rand+0x74>)
 800786c:	6920      	ldr	r0, [r4, #16]
 800786e:	6963      	ldr	r3, [r4, #20]
 8007870:	490d      	ldr	r1, [pc, #52]	; (80078a8 <rand+0x78>)
 8007872:	4342      	muls	r2, r0
 8007874:	fb01 2203 	mla	r2, r1, r3, r2
 8007878:	fba0 0101 	umull	r0, r1, r0, r1
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	eb42 0001 	adc.w	r0, r2, r1
 8007882:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007886:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800788a:	bd10      	pop	{r4, pc}
 800788c:	20000010 	.word	0x20000010
 8007890:	08008a84 	.word	0x08008a84
 8007894:	08008a9b 	.word	0x08008a9b
 8007898:	abcd330e 	.word	0xabcd330e
 800789c:	e66d1234 	.word	0xe66d1234
 80078a0:	0005deec 	.word	0x0005deec
 80078a4:	5851f42d 	.word	0x5851f42d
 80078a8:	4c957f2d 	.word	0x4c957f2d

080078ac <strcat>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4602      	mov	r2, r0
 80078b0:	7814      	ldrb	r4, [r2, #0]
 80078b2:	4613      	mov	r3, r2
 80078b4:	3201      	adds	r2, #1
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	d1fa      	bne.n	80078b0 <strcat+0x4>
 80078ba:	3b01      	subs	r3, #1
 80078bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078c4:	2a00      	cmp	r2, #0
 80078c6:	d1f9      	bne.n	80078bc <strcat+0x10>
 80078c8:	bd10      	pop	{r4, pc}

080078ca <strcpy>:
 80078ca:	4603      	mov	r3, r0
 80078cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d0:	f803 2b01 	strb.w	r2, [r3], #1
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d1f9      	bne.n	80078cc <strcpy+0x2>
 80078d8:	4770      	bx	lr
	...

080078dc <__utoa>:
 80078dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078de:	4c1f      	ldr	r4, [pc, #124]	; (800795c <__utoa+0x80>)
 80078e0:	b08b      	sub	sp, #44	; 0x2c
 80078e2:	4605      	mov	r5, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	466e      	mov	r6, sp
 80078e8:	f104 0c20 	add.w	ip, r4, #32
 80078ec:	6820      	ldr	r0, [r4, #0]
 80078ee:	6861      	ldr	r1, [r4, #4]
 80078f0:	4637      	mov	r7, r6
 80078f2:	c703      	stmia	r7!, {r0, r1}
 80078f4:	3408      	adds	r4, #8
 80078f6:	4564      	cmp	r4, ip
 80078f8:	463e      	mov	r6, r7
 80078fa:	d1f7      	bne.n	80078ec <__utoa+0x10>
 80078fc:	7921      	ldrb	r1, [r4, #4]
 80078fe:	7139      	strb	r1, [r7, #4]
 8007900:	1e91      	subs	r1, r2, #2
 8007902:	6820      	ldr	r0, [r4, #0]
 8007904:	6038      	str	r0, [r7, #0]
 8007906:	2922      	cmp	r1, #34	; 0x22
 8007908:	f04f 0100 	mov.w	r1, #0
 800790c:	d904      	bls.n	8007918 <__utoa+0x3c>
 800790e:	7019      	strb	r1, [r3, #0]
 8007910:	460b      	mov	r3, r1
 8007912:	4618      	mov	r0, r3
 8007914:	b00b      	add	sp, #44	; 0x2c
 8007916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007918:	1e58      	subs	r0, r3, #1
 800791a:	4684      	mov	ip, r0
 800791c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007920:	fb02 5617 	mls	r6, r2, r7, r5
 8007924:	3628      	adds	r6, #40	; 0x28
 8007926:	446e      	add	r6, sp
 8007928:	460c      	mov	r4, r1
 800792a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800792e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007932:	462e      	mov	r6, r5
 8007934:	42b2      	cmp	r2, r6
 8007936:	f101 0101 	add.w	r1, r1, #1
 800793a:	463d      	mov	r5, r7
 800793c:	d9ee      	bls.n	800791c <__utoa+0x40>
 800793e:	2200      	movs	r2, #0
 8007940:	545a      	strb	r2, [r3, r1]
 8007942:	1919      	adds	r1, r3, r4
 8007944:	1aa5      	subs	r5, r4, r2
 8007946:	42aa      	cmp	r2, r5
 8007948:	dae3      	bge.n	8007912 <__utoa+0x36>
 800794a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800794e:	780e      	ldrb	r6, [r1, #0]
 8007950:	7006      	strb	r6, [r0, #0]
 8007952:	3201      	adds	r2, #1
 8007954:	f801 5901 	strb.w	r5, [r1], #-1
 8007958:	e7f4      	b.n	8007944 <__utoa+0x68>
 800795a:	bf00      	nop
 800795c:	08008af6 	.word	0x08008af6

08007960 <__assert_func>:
 8007960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007962:	4614      	mov	r4, r2
 8007964:	461a      	mov	r2, r3
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <__assert_func+0x2c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4605      	mov	r5, r0
 800796c:	68d8      	ldr	r0, [r3, #12]
 800796e:	b14c      	cbz	r4, 8007984 <__assert_func+0x24>
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <__assert_func+0x30>)
 8007972:	9100      	str	r1, [sp, #0]
 8007974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007978:	4906      	ldr	r1, [pc, #24]	; (8007994 <__assert_func+0x34>)
 800797a:	462b      	mov	r3, r5
 800797c:	f000 f80e 	bl	800799c <fiprintf>
 8007980:	f000 fcc4 	bl	800830c <abort>
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <__assert_func+0x38>)
 8007986:	461c      	mov	r4, r3
 8007988:	e7f3      	b.n	8007972 <__assert_func+0x12>
 800798a:	bf00      	nop
 800798c:	20000010 	.word	0x20000010
 8007990:	08008b1b 	.word	0x08008b1b
 8007994:	08008b28 	.word	0x08008b28
 8007998:	08008b56 	.word	0x08008b56

0800799c <fiprintf>:
 800799c:	b40e      	push	{r1, r2, r3}
 800799e:	b503      	push	{r0, r1, lr}
 80079a0:	4601      	mov	r1, r0
 80079a2:	ab03      	add	r3, sp, #12
 80079a4:	4805      	ldr	r0, [pc, #20]	; (80079bc <fiprintf+0x20>)
 80079a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	f000 f919 	bl	8007be4 <_vfiprintf_r>
 80079b2:	b002      	add	sp, #8
 80079b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b8:	b003      	add	sp, #12
 80079ba:	4770      	bx	lr
 80079bc:	20000010 	.word	0x20000010

080079c0 <malloc>:
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <malloc+0xc>)
 80079c2:	4601      	mov	r1, r0
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f000 b86f 	b.w	8007aa8 <_malloc_r>
 80079ca:	bf00      	nop
 80079cc:	20000010 	.word	0x20000010

080079d0 <_free_r>:
 80079d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d044      	beq.n	8007a60 <_free_r+0x90>
 80079d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079da:	9001      	str	r0, [sp, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f1a1 0404 	sub.w	r4, r1, #4
 80079e2:	bfb8      	it	lt
 80079e4:	18e4      	addlt	r4, r4, r3
 80079e6:	f000 feb9 	bl	800875c <__malloc_lock>
 80079ea:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <_free_r+0x94>)
 80079ec:	9801      	ldr	r0, [sp, #4]
 80079ee:	6813      	ldr	r3, [r2, #0]
 80079f0:	b933      	cbnz	r3, 8007a00 <_free_r+0x30>
 80079f2:	6063      	str	r3, [r4, #4]
 80079f4:	6014      	str	r4, [r2, #0]
 80079f6:	b003      	add	sp, #12
 80079f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079fc:	f000 beb4 	b.w	8008768 <__malloc_unlock>
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d908      	bls.n	8007a16 <_free_r+0x46>
 8007a04:	6825      	ldr	r5, [r4, #0]
 8007a06:	1961      	adds	r1, r4, r5
 8007a08:	428b      	cmp	r3, r1
 8007a0a:	bf01      	itttt	eq
 8007a0c:	6819      	ldreq	r1, [r3, #0]
 8007a0e:	685b      	ldreq	r3, [r3, #4]
 8007a10:	1949      	addeq	r1, r1, r5
 8007a12:	6021      	streq	r1, [r4, #0]
 8007a14:	e7ed      	b.n	80079f2 <_free_r+0x22>
 8007a16:	461a      	mov	r2, r3
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	b10b      	cbz	r3, 8007a20 <_free_r+0x50>
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	d9fa      	bls.n	8007a16 <_free_r+0x46>
 8007a20:	6811      	ldr	r1, [r2, #0]
 8007a22:	1855      	adds	r5, r2, r1
 8007a24:	42a5      	cmp	r5, r4
 8007a26:	d10b      	bne.n	8007a40 <_free_r+0x70>
 8007a28:	6824      	ldr	r4, [r4, #0]
 8007a2a:	4421      	add	r1, r4
 8007a2c:	1854      	adds	r4, r2, r1
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	6011      	str	r1, [r2, #0]
 8007a32:	d1e0      	bne.n	80079f6 <_free_r+0x26>
 8007a34:	681c      	ldr	r4, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	6053      	str	r3, [r2, #4]
 8007a3a:	4421      	add	r1, r4
 8007a3c:	6011      	str	r1, [r2, #0]
 8007a3e:	e7da      	b.n	80079f6 <_free_r+0x26>
 8007a40:	d902      	bls.n	8007a48 <_free_r+0x78>
 8007a42:	230c      	movs	r3, #12
 8007a44:	6003      	str	r3, [r0, #0]
 8007a46:	e7d6      	b.n	80079f6 <_free_r+0x26>
 8007a48:	6825      	ldr	r5, [r4, #0]
 8007a4a:	1961      	adds	r1, r4, r5
 8007a4c:	428b      	cmp	r3, r1
 8007a4e:	bf04      	itt	eq
 8007a50:	6819      	ldreq	r1, [r3, #0]
 8007a52:	685b      	ldreq	r3, [r3, #4]
 8007a54:	6063      	str	r3, [r4, #4]
 8007a56:	bf04      	itt	eq
 8007a58:	1949      	addeq	r1, r1, r5
 8007a5a:	6021      	streq	r1, [r4, #0]
 8007a5c:	6054      	str	r4, [r2, #4]
 8007a5e:	e7ca      	b.n	80079f6 <_free_r+0x26>
 8007a60:	b003      	add	sp, #12
 8007a62:	bd30      	pop	{r4, r5, pc}
 8007a64:	200048b8 	.word	0x200048b8

08007a68 <sbrk_aligned>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4e0e      	ldr	r6, [pc, #56]	; (8007aa4 <sbrk_aligned+0x3c>)
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	6831      	ldr	r1, [r6, #0]
 8007a70:	4605      	mov	r5, r0
 8007a72:	b911      	cbnz	r1, 8007a7a <sbrk_aligned+0x12>
 8007a74:	f000 fb7a 	bl	800816c <_sbrk_r>
 8007a78:	6030      	str	r0, [r6, #0]
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f000 fb75 	bl	800816c <_sbrk_r>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	d00a      	beq.n	8007a9c <sbrk_aligned+0x34>
 8007a86:	1cc4      	adds	r4, r0, #3
 8007a88:	f024 0403 	bic.w	r4, r4, #3
 8007a8c:	42a0      	cmp	r0, r4
 8007a8e:	d007      	beq.n	8007aa0 <sbrk_aligned+0x38>
 8007a90:	1a21      	subs	r1, r4, r0
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 fb6a 	bl	800816c <_sbrk_r>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d101      	bne.n	8007aa0 <sbrk_aligned+0x38>
 8007a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	200048bc 	.word	0x200048bc

08007aa8 <_malloc_r>:
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aac:	1ccd      	adds	r5, r1, #3
 8007aae:	f025 0503 	bic.w	r5, r5, #3
 8007ab2:	3508      	adds	r5, #8
 8007ab4:	2d0c      	cmp	r5, #12
 8007ab6:	bf38      	it	cc
 8007ab8:	250c      	movcc	r5, #12
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	4607      	mov	r7, r0
 8007abe:	db01      	blt.n	8007ac4 <_malloc_r+0x1c>
 8007ac0:	42a9      	cmp	r1, r5
 8007ac2:	d905      	bls.n	8007ad0 <_malloc_r+0x28>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	2600      	movs	r6, #0
 8007aca:	4630      	mov	r0, r6
 8007acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad0:	4e2e      	ldr	r6, [pc, #184]	; (8007b8c <_malloc_r+0xe4>)
 8007ad2:	f000 fe43 	bl	800875c <__malloc_lock>
 8007ad6:	6833      	ldr	r3, [r6, #0]
 8007ad8:	461c      	mov	r4, r3
 8007ada:	bb34      	cbnz	r4, 8007b2a <_malloc_r+0x82>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f7ff ffc2 	bl	8007a68 <sbrk_aligned>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	d14d      	bne.n	8007b86 <_malloc_r+0xde>
 8007aea:	6834      	ldr	r4, [r6, #0]
 8007aec:	4626      	mov	r6, r4
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	d140      	bne.n	8007b74 <_malloc_r+0xcc>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	4631      	mov	r1, r6
 8007af6:	4638      	mov	r0, r7
 8007af8:	eb04 0803 	add.w	r8, r4, r3
 8007afc:	f000 fb36 	bl	800816c <_sbrk_r>
 8007b00:	4580      	cmp	r8, r0
 8007b02:	d13a      	bne.n	8007b7a <_malloc_r+0xd2>
 8007b04:	6821      	ldr	r1, [r4, #0]
 8007b06:	3503      	adds	r5, #3
 8007b08:	1a6d      	subs	r5, r5, r1
 8007b0a:	f025 0503 	bic.w	r5, r5, #3
 8007b0e:	3508      	adds	r5, #8
 8007b10:	2d0c      	cmp	r5, #12
 8007b12:	bf38      	it	cc
 8007b14:	250c      	movcc	r5, #12
 8007b16:	4629      	mov	r1, r5
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff ffa5 	bl	8007a68 <sbrk_aligned>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d02b      	beq.n	8007b7a <_malloc_r+0xd2>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	442b      	add	r3, r5
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	e00e      	b.n	8007b48 <_malloc_r+0xa0>
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	1b52      	subs	r2, r2, r5
 8007b2e:	d41e      	bmi.n	8007b6e <_malloc_r+0xc6>
 8007b30:	2a0b      	cmp	r2, #11
 8007b32:	d916      	bls.n	8007b62 <_malloc_r+0xba>
 8007b34:	1961      	adds	r1, r4, r5
 8007b36:	42a3      	cmp	r3, r4
 8007b38:	6025      	str	r5, [r4, #0]
 8007b3a:	bf18      	it	ne
 8007b3c:	6059      	strne	r1, [r3, #4]
 8007b3e:	6863      	ldr	r3, [r4, #4]
 8007b40:	bf08      	it	eq
 8007b42:	6031      	streq	r1, [r6, #0]
 8007b44:	5162      	str	r2, [r4, r5]
 8007b46:	604b      	str	r3, [r1, #4]
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f104 060b 	add.w	r6, r4, #11
 8007b4e:	f000 fe0b 	bl	8008768 <__malloc_unlock>
 8007b52:	f026 0607 	bic.w	r6, r6, #7
 8007b56:	1d23      	adds	r3, r4, #4
 8007b58:	1af2      	subs	r2, r6, r3
 8007b5a:	d0b6      	beq.n	8007aca <_malloc_r+0x22>
 8007b5c:	1b9b      	subs	r3, r3, r6
 8007b5e:	50a3      	str	r3, [r4, r2]
 8007b60:	e7b3      	b.n	8007aca <_malloc_r+0x22>
 8007b62:	6862      	ldr	r2, [r4, #4]
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	bf0c      	ite	eq
 8007b68:	6032      	streq	r2, [r6, #0]
 8007b6a:	605a      	strne	r2, [r3, #4]
 8007b6c:	e7ec      	b.n	8007b48 <_malloc_r+0xa0>
 8007b6e:	4623      	mov	r3, r4
 8007b70:	6864      	ldr	r4, [r4, #4]
 8007b72:	e7b2      	b.n	8007ada <_malloc_r+0x32>
 8007b74:	4634      	mov	r4, r6
 8007b76:	6876      	ldr	r6, [r6, #4]
 8007b78:	e7b9      	b.n	8007aee <_malloc_r+0x46>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f000 fdf2 	bl	8008768 <__malloc_unlock>
 8007b84:	e7a1      	b.n	8007aca <_malloc_r+0x22>
 8007b86:	6025      	str	r5, [r4, #0]
 8007b88:	e7de      	b.n	8007b48 <_malloc_r+0xa0>
 8007b8a:	bf00      	nop
 8007b8c:	200048b8 	.word	0x200048b8

08007b90 <__sfputc_r>:
 8007b90:	6893      	ldr	r3, [r2, #8]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	b410      	push	{r4}
 8007b98:	6093      	str	r3, [r2, #8]
 8007b9a:	da08      	bge.n	8007bae <__sfputc_r+0x1e>
 8007b9c:	6994      	ldr	r4, [r2, #24]
 8007b9e:	42a3      	cmp	r3, r4
 8007ba0:	db01      	blt.n	8007ba6 <__sfputc_r+0x16>
 8007ba2:	290a      	cmp	r1, #10
 8007ba4:	d103      	bne.n	8007bae <__sfputc_r+0x1e>
 8007ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007baa:	f000 baef 	b.w	800818c <__swbuf_r>
 8007bae:	6813      	ldr	r3, [r2, #0]
 8007bb0:	1c58      	adds	r0, r3, #1
 8007bb2:	6010      	str	r0, [r2, #0]
 8007bb4:	7019      	strb	r1, [r3, #0]
 8007bb6:	4608      	mov	r0, r1
 8007bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <__sfputs_r>:
 8007bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	18d5      	adds	r5, r2, r3
 8007bc8:	42ac      	cmp	r4, r5
 8007bca:	d101      	bne.n	8007bd0 <__sfputs_r+0x12>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e007      	b.n	8007be0 <__sfputs_r+0x22>
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	463a      	mov	r2, r7
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ffda 	bl	8007b90 <__sfputc_r>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d1f3      	bne.n	8007bc8 <__sfputs_r+0xa>
 8007be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be4 <_vfiprintf_r>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	460d      	mov	r5, r1
 8007bea:	b09d      	sub	sp, #116	; 0x74
 8007bec:	4614      	mov	r4, r2
 8007bee:	4698      	mov	r8, r3
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	b118      	cbz	r0, 8007bfc <_vfiprintf_r+0x18>
 8007bf4:	6983      	ldr	r3, [r0, #24]
 8007bf6:	b90b      	cbnz	r3, 8007bfc <_vfiprintf_r+0x18>
 8007bf8:	f000 fcaa 	bl	8008550 <__sinit>
 8007bfc:	4b89      	ldr	r3, [pc, #548]	; (8007e24 <_vfiprintf_r+0x240>)
 8007bfe:	429d      	cmp	r5, r3
 8007c00:	d11b      	bne.n	8007c3a <_vfiprintf_r+0x56>
 8007c02:	6875      	ldr	r5, [r6, #4]
 8007c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c06:	07d9      	lsls	r1, r3, #31
 8007c08:	d405      	bmi.n	8007c16 <_vfiprintf_r+0x32>
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	059a      	lsls	r2, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_vfiprintf_r+0x32>
 8007c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c12:	f000 fd3b 	bl	800868c <__retarget_lock_acquire_recursive>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	071b      	lsls	r3, r3, #28
 8007c1a:	d501      	bpl.n	8007c20 <_vfiprintf_r+0x3c>
 8007c1c:	692b      	ldr	r3, [r5, #16]
 8007c1e:	b9eb      	cbnz	r3, 8007c5c <_vfiprintf_r+0x78>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4630      	mov	r0, r6
 8007c24:	f000 fb04 	bl	8008230 <__swsetup_r>
 8007c28:	b1c0      	cbz	r0, 8007c5c <_vfiprintf_r+0x78>
 8007c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c2c:	07dc      	lsls	r4, r3, #31
 8007c2e:	d50e      	bpl.n	8007c4e <_vfiprintf_r+0x6a>
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	b01d      	add	sp, #116	; 0x74
 8007c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3a:	4b7b      	ldr	r3, [pc, #492]	; (8007e28 <_vfiprintf_r+0x244>)
 8007c3c:	429d      	cmp	r5, r3
 8007c3e:	d101      	bne.n	8007c44 <_vfiprintf_r+0x60>
 8007c40:	68b5      	ldr	r5, [r6, #8]
 8007c42:	e7df      	b.n	8007c04 <_vfiprintf_r+0x20>
 8007c44:	4b79      	ldr	r3, [pc, #484]	; (8007e2c <_vfiprintf_r+0x248>)
 8007c46:	429d      	cmp	r5, r3
 8007c48:	bf08      	it	eq
 8007c4a:	68f5      	ldreq	r5, [r6, #12]
 8007c4c:	e7da      	b.n	8007c04 <_vfiprintf_r+0x20>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	0598      	lsls	r0, r3, #22
 8007c52:	d4ed      	bmi.n	8007c30 <_vfiprintf_r+0x4c>
 8007c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c56:	f000 fd1a 	bl	800868e <__retarget_lock_release_recursive>
 8007c5a:	e7e9      	b.n	8007c30 <_vfiprintf_r+0x4c>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c60:	2320      	movs	r3, #32
 8007c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6a:	2330      	movs	r3, #48	; 0x30
 8007c6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e30 <_vfiprintf_r+0x24c>
 8007c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c74:	f04f 0901 	mov.w	r9, #1
 8007c78:	4623      	mov	r3, r4
 8007c7a:	469a      	mov	sl, r3
 8007c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c80:	b10a      	cbz	r2, 8007c86 <_vfiprintf_r+0xa2>
 8007c82:	2a25      	cmp	r2, #37	; 0x25
 8007c84:	d1f9      	bne.n	8007c7a <_vfiprintf_r+0x96>
 8007c86:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8a:	d00b      	beq.n	8007ca4 <_vfiprintf_r+0xc0>
 8007c8c:	465b      	mov	r3, fp
 8007c8e:	4622      	mov	r2, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ff93 	bl	8007bbe <__sfputs_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f000 80aa 	beq.w	8007df2 <_vfiprintf_r+0x20e>
 8007c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca0:	445a      	add	r2, fp
 8007ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80a2 	beq.w	8007df2 <_vfiprintf_r+0x20e>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cb8:	f10a 0a01 	add.w	sl, sl, #1
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8007cc6:	4654      	mov	r4, sl
 8007cc8:	2205      	movs	r2, #5
 8007cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cce:	4858      	ldr	r0, [pc, #352]	; (8007e30 <_vfiprintf_r+0x24c>)
 8007cd0:	f7f8 fabe 	bl	8000250 <memchr>
 8007cd4:	9a04      	ldr	r2, [sp, #16]
 8007cd6:	b9d8      	cbnz	r0, 8007d10 <_vfiprintf_r+0x12c>
 8007cd8:	06d1      	lsls	r1, r2, #27
 8007cda:	bf44      	itt	mi
 8007cdc:	2320      	movmi	r3, #32
 8007cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce2:	0713      	lsls	r3, r2, #28
 8007ce4:	bf44      	itt	mi
 8007ce6:	232b      	movmi	r3, #43	; 0x2b
 8007ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cec:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf2:	d015      	beq.n	8007d20 <_vfiprintf_r+0x13c>
 8007cf4:	9a07      	ldr	r2, [sp, #28]
 8007cf6:	4654      	mov	r4, sl
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f04f 0c0a 	mov.w	ip, #10
 8007cfe:	4621      	mov	r1, r4
 8007d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d04:	3b30      	subs	r3, #48	; 0x30
 8007d06:	2b09      	cmp	r3, #9
 8007d08:	d94e      	bls.n	8007da8 <_vfiprintf_r+0x1c4>
 8007d0a:	b1b0      	cbz	r0, 8007d3a <_vfiprintf_r+0x156>
 8007d0c:	9207      	str	r2, [sp, #28]
 8007d0e:	e014      	b.n	8007d3a <_vfiprintf_r+0x156>
 8007d10:	eba0 0308 	sub.w	r3, r0, r8
 8007d14:	fa09 f303 	lsl.w	r3, r9, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	46a2      	mov	sl, r4
 8007d1e:	e7d2      	b.n	8007cc6 <_vfiprintf_r+0xe2>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d19      	adds	r1, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9103      	str	r1, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfbb      	ittet	lt
 8007d2c:	425b      	neglt	r3, r3
 8007d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d32:	9307      	strge	r3, [sp, #28]
 8007d34:	9307      	strlt	r3, [sp, #28]
 8007d36:	bfb8      	it	lt
 8007d38:	9204      	strlt	r2, [sp, #16]
 8007d3a:	7823      	ldrb	r3, [r4, #0]
 8007d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d3e:	d10c      	bne.n	8007d5a <_vfiprintf_r+0x176>
 8007d40:	7863      	ldrb	r3, [r4, #1]
 8007d42:	2b2a      	cmp	r3, #42	; 0x2a
 8007d44:	d135      	bne.n	8007db2 <_vfiprintf_r+0x1ce>
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	1d1a      	adds	r2, r3, #4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	9203      	str	r2, [sp, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bfb8      	it	lt
 8007d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d56:	3402      	adds	r4, #2
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e40 <_vfiprintf_r+0x25c>
 8007d5e:	7821      	ldrb	r1, [r4, #0]
 8007d60:	2203      	movs	r2, #3
 8007d62:	4650      	mov	r0, sl
 8007d64:	f7f8 fa74 	bl	8000250 <memchr>
 8007d68:	b140      	cbz	r0, 8007d7c <_vfiprintf_r+0x198>
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	eba0 000a 	sub.w	r0, r0, sl
 8007d70:	fa03 f000 	lsl.w	r0, r3, r0
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	4303      	orrs	r3, r0
 8007d78:	3401      	adds	r4, #1
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d80:	482c      	ldr	r0, [pc, #176]	; (8007e34 <_vfiprintf_r+0x250>)
 8007d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d86:	2206      	movs	r2, #6
 8007d88:	f7f8 fa62 	bl	8000250 <memchr>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d03f      	beq.n	8007e10 <_vfiprintf_r+0x22c>
 8007d90:	4b29      	ldr	r3, [pc, #164]	; (8007e38 <_vfiprintf_r+0x254>)
 8007d92:	bb1b      	cbnz	r3, 8007ddc <_vfiprintf_r+0x1f8>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	3307      	adds	r3, #7
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	9303      	str	r3, [sp, #12]
 8007da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da2:	443b      	add	r3, r7
 8007da4:	9309      	str	r3, [sp, #36]	; 0x24
 8007da6:	e767      	b.n	8007c78 <_vfiprintf_r+0x94>
 8007da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dac:	460c      	mov	r4, r1
 8007dae:	2001      	movs	r0, #1
 8007db0:	e7a5      	b.n	8007cfe <_vfiprintf_r+0x11a>
 8007db2:	2300      	movs	r3, #0
 8007db4:	3401      	adds	r4, #1
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	4619      	mov	r1, r3
 8007dba:	f04f 0c0a 	mov.w	ip, #10
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc4:	3a30      	subs	r2, #48	; 0x30
 8007dc6:	2a09      	cmp	r2, #9
 8007dc8:	d903      	bls.n	8007dd2 <_vfiprintf_r+0x1ee>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0c5      	beq.n	8007d5a <_vfiprintf_r+0x176>
 8007dce:	9105      	str	r1, [sp, #20]
 8007dd0:	e7c3      	b.n	8007d5a <_vfiprintf_r+0x176>
 8007dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e7f0      	b.n	8007dbe <_vfiprintf_r+0x1da>
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	462a      	mov	r2, r5
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <_vfiprintf_r+0x258>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	4630      	mov	r0, r6
 8007de8:	f3af 8000 	nop.w
 8007dec:	4607      	mov	r7, r0
 8007dee:	1c78      	adds	r0, r7, #1
 8007df0:	d1d6      	bne.n	8007da0 <_vfiprintf_r+0x1bc>
 8007df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df4:	07d9      	lsls	r1, r3, #31
 8007df6:	d405      	bmi.n	8007e04 <_vfiprintf_r+0x220>
 8007df8:	89ab      	ldrh	r3, [r5, #12]
 8007dfa:	059a      	lsls	r2, r3, #22
 8007dfc:	d402      	bmi.n	8007e04 <_vfiprintf_r+0x220>
 8007dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e00:	f000 fc45 	bl	800868e <__retarget_lock_release_recursive>
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	065b      	lsls	r3, r3, #25
 8007e08:	f53f af12 	bmi.w	8007c30 <_vfiprintf_r+0x4c>
 8007e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e0e:	e711      	b.n	8007c34 <_vfiprintf_r+0x50>
 8007e10:	ab03      	add	r3, sp, #12
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	462a      	mov	r2, r5
 8007e16:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <_vfiprintf_r+0x258>)
 8007e18:	a904      	add	r1, sp, #16
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f000 f880 	bl	8007f20 <_printf_i>
 8007e20:	e7e4      	b.n	8007dec <_vfiprintf_r+0x208>
 8007e22:	bf00      	nop
 8007e24:	08008bac 	.word	0x08008bac
 8007e28:	08008bcc 	.word	0x08008bcc
 8007e2c:	08008b8c 	.word	0x08008b8c
 8007e30:	08008b57 	.word	0x08008b57
 8007e34:	08008b61 	.word	0x08008b61
 8007e38:	00000000 	.word	0x00000000
 8007e3c:	08007bbf 	.word	0x08007bbf
 8007e40:	08008b5d 	.word	0x08008b5d

08007e44 <_printf_common>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	4616      	mov	r6, r2
 8007e4a:	4699      	mov	r9, r3
 8007e4c:	688a      	ldr	r2, [r1, #8]
 8007e4e:	690b      	ldr	r3, [r1, #16]
 8007e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bfb8      	it	lt
 8007e58:	4613      	movlt	r3, r2
 8007e5a:	6033      	str	r3, [r6, #0]
 8007e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e60:	4607      	mov	r7, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	b10a      	cbz	r2, 8007e6a <_printf_common+0x26>
 8007e66:	3301      	adds	r3, #1
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	0699      	lsls	r1, r3, #26
 8007e6e:	bf42      	ittt	mi
 8007e70:	6833      	ldrmi	r3, [r6, #0]
 8007e72:	3302      	addmi	r3, #2
 8007e74:	6033      	strmi	r3, [r6, #0]
 8007e76:	6825      	ldr	r5, [r4, #0]
 8007e78:	f015 0506 	ands.w	r5, r5, #6
 8007e7c:	d106      	bne.n	8007e8c <_printf_common+0x48>
 8007e7e:	f104 0a19 	add.w	sl, r4, #25
 8007e82:	68e3      	ldr	r3, [r4, #12]
 8007e84:	6832      	ldr	r2, [r6, #0]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	dc26      	bgt.n	8007eda <_printf_common+0x96>
 8007e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e90:	1e13      	subs	r3, r2, #0
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	bf18      	it	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	0692      	lsls	r2, r2, #26
 8007e9a:	d42b      	bmi.n	8007ef4 <_printf_common+0xb0>
 8007e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c0      	blx	r8
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d01e      	beq.n	8007ee8 <_printf_common+0xa4>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	68e5      	ldr	r5, [r4, #12]
 8007eae:	6832      	ldr	r2, [r6, #0]
 8007eb0:	f003 0306 	and.w	r3, r3, #6
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	bf08      	it	eq
 8007eb8:	1aad      	subeq	r5, r5, r2
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	bf0c      	ite	eq
 8007ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec4:	2500      	movne	r5, #0
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bfc4      	itt	gt
 8007eca:	1a9b      	subgt	r3, r3, r2
 8007ecc:	18ed      	addgt	r5, r5, r3
 8007ece:	2600      	movs	r6, #0
 8007ed0:	341a      	adds	r4, #26
 8007ed2:	42b5      	cmp	r5, r6
 8007ed4:	d11a      	bne.n	8007f0c <_printf_common+0xc8>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	e008      	b.n	8007eec <_printf_common+0xa8>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4652      	mov	r2, sl
 8007ede:	4649      	mov	r1, r9
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	47c0      	blx	r8
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d103      	bne.n	8007ef0 <_printf_common+0xac>
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	e7c6      	b.n	8007e82 <_printf_common+0x3e>
 8007ef4:	18e1      	adds	r1, r4, r3
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	2030      	movs	r0, #48	; 0x30
 8007efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007efe:	4422      	add	r2, r4
 8007f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f08:	3302      	adds	r3, #2
 8007f0a:	e7c7      	b.n	8007e9c <_printf_common+0x58>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4622      	mov	r2, r4
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d0e6      	beq.n	8007ee8 <_printf_common+0xa4>
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7d9      	b.n	8007ed2 <_printf_common+0x8e>
	...

08007f20 <_printf_i>:
 8007f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	7e0f      	ldrb	r7, [r1, #24]
 8007f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f28:	2f78      	cmp	r7, #120	; 0x78
 8007f2a:	4691      	mov	r9, r2
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	469a      	mov	sl, r3
 8007f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f36:	d807      	bhi.n	8007f48 <_printf_i+0x28>
 8007f38:	2f62      	cmp	r7, #98	; 0x62
 8007f3a:	d80a      	bhi.n	8007f52 <_printf_i+0x32>
 8007f3c:	2f00      	cmp	r7, #0
 8007f3e:	f000 80d8 	beq.w	80080f2 <_printf_i+0x1d2>
 8007f42:	2f58      	cmp	r7, #88	; 0x58
 8007f44:	f000 80a3 	beq.w	800808e <_printf_i+0x16e>
 8007f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f50:	e03a      	b.n	8007fc8 <_printf_i+0xa8>
 8007f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f56:	2b15      	cmp	r3, #21
 8007f58:	d8f6      	bhi.n	8007f48 <_printf_i+0x28>
 8007f5a:	a101      	add	r1, pc, #4	; (adr r1, 8007f60 <_printf_i+0x40>)
 8007f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f60:	08007fb9 	.word	0x08007fb9
 8007f64:	08007fcd 	.word	0x08007fcd
 8007f68:	08007f49 	.word	0x08007f49
 8007f6c:	08007f49 	.word	0x08007f49
 8007f70:	08007f49 	.word	0x08007f49
 8007f74:	08007f49 	.word	0x08007f49
 8007f78:	08007fcd 	.word	0x08007fcd
 8007f7c:	08007f49 	.word	0x08007f49
 8007f80:	08007f49 	.word	0x08007f49
 8007f84:	08007f49 	.word	0x08007f49
 8007f88:	08007f49 	.word	0x08007f49
 8007f8c:	080080d9 	.word	0x080080d9
 8007f90:	08007ffd 	.word	0x08007ffd
 8007f94:	080080bb 	.word	0x080080bb
 8007f98:	08007f49 	.word	0x08007f49
 8007f9c:	08007f49 	.word	0x08007f49
 8007fa0:	080080fb 	.word	0x080080fb
 8007fa4:	08007f49 	.word	0x08007f49
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	08007f49 	.word	0x08007f49
 8007fb0:	08007f49 	.word	0x08007f49
 8007fb4:	080080c3 	.word	0x080080c3
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	1d1a      	adds	r2, r3, #4
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	602a      	str	r2, [r5, #0]
 8007fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e0a3      	b.n	8008114 <_printf_i+0x1f4>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	6829      	ldr	r1, [r5, #0]
 8007fd0:	0606      	lsls	r6, r0, #24
 8007fd2:	f101 0304 	add.w	r3, r1, #4
 8007fd6:	d50a      	bpl.n	8007fee <_printf_i+0xce>
 8007fd8:	680e      	ldr	r6, [r1, #0]
 8007fda:	602b      	str	r3, [r5, #0]
 8007fdc:	2e00      	cmp	r6, #0
 8007fde:	da03      	bge.n	8007fe8 <_printf_i+0xc8>
 8007fe0:	232d      	movs	r3, #45	; 0x2d
 8007fe2:	4276      	negs	r6, r6
 8007fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe8:	485e      	ldr	r0, [pc, #376]	; (8008164 <_printf_i+0x244>)
 8007fea:	230a      	movs	r3, #10
 8007fec:	e019      	b.n	8008022 <_printf_i+0x102>
 8007fee:	680e      	ldr	r6, [r1, #0]
 8007ff0:	602b      	str	r3, [r5, #0]
 8007ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ff6:	bf18      	it	ne
 8007ff8:	b236      	sxthne	r6, r6
 8007ffa:	e7ef      	b.n	8007fdc <_printf_i+0xbc>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	6029      	str	r1, [r5, #0]
 8008004:	0601      	lsls	r1, r0, #24
 8008006:	d501      	bpl.n	800800c <_printf_i+0xec>
 8008008:	681e      	ldr	r6, [r3, #0]
 800800a:	e002      	b.n	8008012 <_printf_i+0xf2>
 800800c:	0646      	lsls	r6, r0, #25
 800800e:	d5fb      	bpl.n	8008008 <_printf_i+0xe8>
 8008010:	881e      	ldrh	r6, [r3, #0]
 8008012:	4854      	ldr	r0, [pc, #336]	; (8008164 <_printf_i+0x244>)
 8008014:	2f6f      	cmp	r7, #111	; 0x6f
 8008016:	bf0c      	ite	eq
 8008018:	2308      	moveq	r3, #8
 800801a:	230a      	movne	r3, #10
 800801c:	2100      	movs	r1, #0
 800801e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008022:	6865      	ldr	r5, [r4, #4]
 8008024:	60a5      	str	r5, [r4, #8]
 8008026:	2d00      	cmp	r5, #0
 8008028:	bfa2      	ittt	ge
 800802a:	6821      	ldrge	r1, [r4, #0]
 800802c:	f021 0104 	bicge.w	r1, r1, #4
 8008030:	6021      	strge	r1, [r4, #0]
 8008032:	b90e      	cbnz	r6, 8008038 <_printf_i+0x118>
 8008034:	2d00      	cmp	r5, #0
 8008036:	d04d      	beq.n	80080d4 <_printf_i+0x1b4>
 8008038:	4615      	mov	r5, r2
 800803a:	fbb6 f1f3 	udiv	r1, r6, r3
 800803e:	fb03 6711 	mls	r7, r3, r1, r6
 8008042:	5dc7      	ldrb	r7, [r0, r7]
 8008044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008048:	4637      	mov	r7, r6
 800804a:	42bb      	cmp	r3, r7
 800804c:	460e      	mov	r6, r1
 800804e:	d9f4      	bls.n	800803a <_printf_i+0x11a>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d10b      	bne.n	800806c <_printf_i+0x14c>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07de      	lsls	r6, r3, #31
 8008058:	d508      	bpl.n	800806c <_printf_i+0x14c>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4299      	cmp	r1, r3
 8008060:	bfde      	ittt	le
 8008062:	2330      	movle	r3, #48	; 0x30
 8008064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800806c:	1b52      	subs	r2, r2, r5
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	f8cd a000 	str.w	sl, [sp]
 8008074:	464b      	mov	r3, r9
 8008076:	aa03      	add	r2, sp, #12
 8008078:	4621      	mov	r1, r4
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fee2 	bl	8007e44 <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	d14c      	bne.n	800811e <_printf_i+0x1fe>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b004      	add	sp, #16
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	4835      	ldr	r0, [pc, #212]	; (8008164 <_printf_i+0x244>)
 8008090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008094:	6829      	ldr	r1, [r5, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f851 6b04 	ldr.w	r6, [r1], #4
 800809c:	6029      	str	r1, [r5, #0]
 800809e:	061d      	lsls	r5, r3, #24
 80080a0:	d514      	bpl.n	80080cc <_printf_i+0x1ac>
 80080a2:	07df      	lsls	r7, r3, #31
 80080a4:	bf44      	itt	mi
 80080a6:	f043 0320 	orrmi.w	r3, r3, #32
 80080aa:	6023      	strmi	r3, [r4, #0]
 80080ac:	b91e      	cbnz	r6, 80080b6 <_printf_i+0x196>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	f023 0320 	bic.w	r3, r3, #32
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	2310      	movs	r3, #16
 80080b8:	e7b0      	b.n	800801c <_printf_i+0xfc>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f043 0320 	orr.w	r3, r3, #32
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	2378      	movs	r3, #120	; 0x78
 80080c4:	4828      	ldr	r0, [pc, #160]	; (8008168 <_printf_i+0x248>)
 80080c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ca:	e7e3      	b.n	8008094 <_printf_i+0x174>
 80080cc:	0659      	lsls	r1, r3, #25
 80080ce:	bf48      	it	mi
 80080d0:	b2b6      	uxthmi	r6, r6
 80080d2:	e7e6      	b.n	80080a2 <_printf_i+0x182>
 80080d4:	4615      	mov	r5, r2
 80080d6:	e7bb      	b.n	8008050 <_printf_i+0x130>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	6826      	ldr	r6, [r4, #0]
 80080dc:	6961      	ldr	r1, [r4, #20]
 80080de:	1d18      	adds	r0, r3, #4
 80080e0:	6028      	str	r0, [r5, #0]
 80080e2:	0635      	lsls	r5, r6, #24
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	d501      	bpl.n	80080ec <_printf_i+0x1cc>
 80080e8:	6019      	str	r1, [r3, #0]
 80080ea:	e002      	b.n	80080f2 <_printf_i+0x1d2>
 80080ec:	0670      	lsls	r0, r6, #25
 80080ee:	d5fb      	bpl.n	80080e8 <_printf_i+0x1c8>
 80080f0:	8019      	strh	r1, [r3, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	4615      	mov	r5, r2
 80080f8:	e7ba      	b.n	8008070 <_printf_i+0x150>
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	602a      	str	r2, [r5, #0]
 8008100:	681d      	ldr	r5, [r3, #0]
 8008102:	6862      	ldr	r2, [r4, #4]
 8008104:	2100      	movs	r1, #0
 8008106:	4628      	mov	r0, r5
 8008108:	f7f8 f8a2 	bl	8000250 <memchr>
 800810c:	b108      	cbz	r0, 8008112 <_printf_i+0x1f2>
 800810e:	1b40      	subs	r0, r0, r5
 8008110:	6060      	str	r0, [r4, #4]
 8008112:	6863      	ldr	r3, [r4, #4]
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	2300      	movs	r3, #0
 8008118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811c:	e7a8      	b.n	8008070 <_printf_i+0x150>
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	462a      	mov	r2, r5
 8008122:	4649      	mov	r1, r9
 8008124:	4640      	mov	r0, r8
 8008126:	47d0      	blx	sl
 8008128:	3001      	adds	r0, #1
 800812a:	d0ab      	beq.n	8008084 <_printf_i+0x164>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	079b      	lsls	r3, r3, #30
 8008130:	d413      	bmi.n	800815a <_printf_i+0x23a>
 8008132:	68e0      	ldr	r0, [r4, #12]
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	4298      	cmp	r0, r3
 8008138:	bfb8      	it	lt
 800813a:	4618      	movlt	r0, r3
 800813c:	e7a4      	b.n	8008088 <_printf_i+0x168>
 800813e:	2301      	movs	r3, #1
 8008140:	4632      	mov	r2, r6
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d09b      	beq.n	8008084 <_printf_i+0x164>
 800814c:	3501      	adds	r5, #1
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	9903      	ldr	r1, [sp, #12]
 8008152:	1a5b      	subs	r3, r3, r1
 8008154:	42ab      	cmp	r3, r5
 8008156:	dcf2      	bgt.n	800813e <_printf_i+0x21e>
 8008158:	e7eb      	b.n	8008132 <_printf_i+0x212>
 800815a:	2500      	movs	r5, #0
 800815c:	f104 0619 	add.w	r6, r4, #25
 8008160:	e7f5      	b.n	800814e <_printf_i+0x22e>
 8008162:	bf00      	nop
 8008164:	08008b68 	.word	0x08008b68
 8008168:	08008b79 	.word	0x08008b79

0800816c <_sbrk_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d06      	ldr	r5, [pc, #24]	; (8008188 <_sbrk_r+0x1c>)
 8008170:	2300      	movs	r3, #0
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f7f9 fa5e 	bl	8001638 <_sbrk>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_sbrk_r+0x1a>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_sbrk_r+0x1a>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	200048c4 	.word	0x200048c4

0800818c <__swbuf_r>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	460e      	mov	r6, r1
 8008190:	4614      	mov	r4, r2
 8008192:	4605      	mov	r5, r0
 8008194:	b118      	cbz	r0, 800819e <__swbuf_r+0x12>
 8008196:	6983      	ldr	r3, [r0, #24]
 8008198:	b90b      	cbnz	r3, 800819e <__swbuf_r+0x12>
 800819a:	f000 f9d9 	bl	8008550 <__sinit>
 800819e:	4b21      	ldr	r3, [pc, #132]	; (8008224 <__swbuf_r+0x98>)
 80081a0:	429c      	cmp	r4, r3
 80081a2:	d12b      	bne.n	80081fc <__swbuf_r+0x70>
 80081a4:	686c      	ldr	r4, [r5, #4]
 80081a6:	69a3      	ldr	r3, [r4, #24]
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	071a      	lsls	r2, r3, #28
 80081ae:	d52f      	bpl.n	8008210 <__swbuf_r+0x84>
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	b36b      	cbz	r3, 8008210 <__swbuf_r+0x84>
 80081b4:	6923      	ldr	r3, [r4, #16]
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	1ac0      	subs	r0, r0, r3
 80081ba:	6963      	ldr	r3, [r4, #20]
 80081bc:	b2f6      	uxtb	r6, r6
 80081be:	4283      	cmp	r3, r0
 80081c0:	4637      	mov	r7, r6
 80081c2:	dc04      	bgt.n	80081ce <__swbuf_r+0x42>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f92e 	bl	8008428 <_fflush_r>
 80081cc:	bb30      	cbnz	r0, 800821c <__swbuf_r+0x90>
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	60a3      	str	r3, [r4, #8]
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	701e      	strb	r6, [r3, #0]
 80081dc:	6963      	ldr	r3, [r4, #20]
 80081de:	3001      	adds	r0, #1
 80081e0:	4283      	cmp	r3, r0
 80081e2:	d004      	beq.n	80081ee <__swbuf_r+0x62>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	07db      	lsls	r3, r3, #31
 80081e8:	d506      	bpl.n	80081f8 <__swbuf_r+0x6c>
 80081ea:	2e0a      	cmp	r6, #10
 80081ec:	d104      	bne.n	80081f8 <__swbuf_r+0x6c>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f919 	bl	8008428 <_fflush_r>
 80081f6:	b988      	cbnz	r0, 800821c <__swbuf_r+0x90>
 80081f8:	4638      	mov	r0, r7
 80081fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <__swbuf_r+0x9c>)
 80081fe:	429c      	cmp	r4, r3
 8008200:	d101      	bne.n	8008206 <__swbuf_r+0x7a>
 8008202:	68ac      	ldr	r4, [r5, #8]
 8008204:	e7cf      	b.n	80081a6 <__swbuf_r+0x1a>
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <__swbuf_r+0xa0>)
 8008208:	429c      	cmp	r4, r3
 800820a:	bf08      	it	eq
 800820c:	68ec      	ldreq	r4, [r5, #12]
 800820e:	e7ca      	b.n	80081a6 <__swbuf_r+0x1a>
 8008210:	4621      	mov	r1, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f80c 	bl	8008230 <__swsetup_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	d0cb      	beq.n	80081b4 <__swbuf_r+0x28>
 800821c:	f04f 37ff 	mov.w	r7, #4294967295
 8008220:	e7ea      	b.n	80081f8 <__swbuf_r+0x6c>
 8008222:	bf00      	nop
 8008224:	08008bac 	.word	0x08008bac
 8008228:	08008bcc 	.word	0x08008bcc
 800822c:	08008b8c 	.word	0x08008b8c

08008230 <__swsetup_r>:
 8008230:	4b32      	ldr	r3, [pc, #200]	; (80082fc <__swsetup_r+0xcc>)
 8008232:	b570      	push	{r4, r5, r6, lr}
 8008234:	681d      	ldr	r5, [r3, #0]
 8008236:	4606      	mov	r6, r0
 8008238:	460c      	mov	r4, r1
 800823a:	b125      	cbz	r5, 8008246 <__swsetup_r+0x16>
 800823c:	69ab      	ldr	r3, [r5, #24]
 800823e:	b913      	cbnz	r3, 8008246 <__swsetup_r+0x16>
 8008240:	4628      	mov	r0, r5
 8008242:	f000 f985 	bl	8008550 <__sinit>
 8008246:	4b2e      	ldr	r3, [pc, #184]	; (8008300 <__swsetup_r+0xd0>)
 8008248:	429c      	cmp	r4, r3
 800824a:	d10f      	bne.n	800826c <__swsetup_r+0x3c>
 800824c:	686c      	ldr	r4, [r5, #4]
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008254:	0719      	lsls	r1, r3, #28
 8008256:	d42c      	bmi.n	80082b2 <__swsetup_r+0x82>
 8008258:	06dd      	lsls	r5, r3, #27
 800825a:	d411      	bmi.n	8008280 <__swsetup_r+0x50>
 800825c:	2309      	movs	r3, #9
 800825e:	6033      	str	r3, [r6, #0]
 8008260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008264:	81a3      	strh	r3, [r4, #12]
 8008266:	f04f 30ff 	mov.w	r0, #4294967295
 800826a:	e03e      	b.n	80082ea <__swsetup_r+0xba>
 800826c:	4b25      	ldr	r3, [pc, #148]	; (8008304 <__swsetup_r+0xd4>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d101      	bne.n	8008276 <__swsetup_r+0x46>
 8008272:	68ac      	ldr	r4, [r5, #8]
 8008274:	e7eb      	b.n	800824e <__swsetup_r+0x1e>
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <__swsetup_r+0xd8>)
 8008278:	429c      	cmp	r4, r3
 800827a:	bf08      	it	eq
 800827c:	68ec      	ldreq	r4, [r5, #12]
 800827e:	e7e6      	b.n	800824e <__swsetup_r+0x1e>
 8008280:	0758      	lsls	r0, r3, #29
 8008282:	d512      	bpl.n	80082aa <__swsetup_r+0x7a>
 8008284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008286:	b141      	cbz	r1, 800829a <__swsetup_r+0x6a>
 8008288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800828c:	4299      	cmp	r1, r3
 800828e:	d002      	beq.n	8008296 <__swsetup_r+0x66>
 8008290:	4630      	mov	r0, r6
 8008292:	f7ff fb9d 	bl	80079d0 <_free_r>
 8008296:	2300      	movs	r3, #0
 8008298:	6363      	str	r3, [r4, #52]	; 0x34
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082a0:	81a3      	strh	r3, [r4, #12]
 80082a2:	2300      	movs	r3, #0
 80082a4:	6063      	str	r3, [r4, #4]
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f043 0308 	orr.w	r3, r3, #8
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	b94b      	cbnz	r3, 80082ca <__swsetup_r+0x9a>
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c0:	d003      	beq.n	80082ca <__swsetup_r+0x9a>
 80082c2:	4621      	mov	r1, r4
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 fa09 	bl	80086dc <__smakebuf_r>
 80082ca:	89a0      	ldrh	r0, [r4, #12]
 80082cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d0:	f010 0301 	ands.w	r3, r0, #1
 80082d4:	d00a      	beq.n	80082ec <__swsetup_r+0xbc>
 80082d6:	2300      	movs	r3, #0
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	6963      	ldr	r3, [r4, #20]
 80082dc:	425b      	negs	r3, r3
 80082de:	61a3      	str	r3, [r4, #24]
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	b943      	cbnz	r3, 80082f6 <__swsetup_r+0xc6>
 80082e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082e8:	d1ba      	bne.n	8008260 <__swsetup_r+0x30>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	0781      	lsls	r1, r0, #30
 80082ee:	bf58      	it	pl
 80082f0:	6963      	ldrpl	r3, [r4, #20]
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	e7f4      	b.n	80082e0 <__swsetup_r+0xb0>
 80082f6:	2000      	movs	r0, #0
 80082f8:	e7f7      	b.n	80082ea <__swsetup_r+0xba>
 80082fa:	bf00      	nop
 80082fc:	20000010 	.word	0x20000010
 8008300:	08008bac 	.word	0x08008bac
 8008304:	08008bcc 	.word	0x08008bcc
 8008308:	08008b8c 	.word	0x08008b8c

0800830c <abort>:
 800830c:	b508      	push	{r3, lr}
 800830e:	2006      	movs	r0, #6
 8008310:	f000 fa58 	bl	80087c4 <raise>
 8008314:	2001      	movs	r0, #1
 8008316:	f7f9 f917 	bl	8001548 <_exit>
	...

0800831c <__sflush_r>:
 800831c:	898a      	ldrh	r2, [r1, #12]
 800831e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008322:	4605      	mov	r5, r0
 8008324:	0710      	lsls	r0, r2, #28
 8008326:	460c      	mov	r4, r1
 8008328:	d458      	bmi.n	80083dc <__sflush_r+0xc0>
 800832a:	684b      	ldr	r3, [r1, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	dc05      	bgt.n	800833c <__sflush_r+0x20>
 8008330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	dc02      	bgt.n	800833c <__sflush_r+0x20>
 8008336:	2000      	movs	r0, #0
 8008338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800833e:	2e00      	cmp	r6, #0
 8008340:	d0f9      	beq.n	8008336 <__sflush_r+0x1a>
 8008342:	2300      	movs	r3, #0
 8008344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008348:	682f      	ldr	r7, [r5, #0]
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	d032      	beq.n	80083b4 <__sflush_r+0x98>
 800834e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	075a      	lsls	r2, r3, #29
 8008354:	d505      	bpl.n	8008362 <__sflush_r+0x46>
 8008356:	6863      	ldr	r3, [r4, #4]
 8008358:	1ac0      	subs	r0, r0, r3
 800835a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800835c:	b10b      	cbz	r3, 8008362 <__sflush_r+0x46>
 800835e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008360:	1ac0      	subs	r0, r0, r3
 8008362:	2300      	movs	r3, #0
 8008364:	4602      	mov	r2, r0
 8008366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008368:	6a21      	ldr	r1, [r4, #32]
 800836a:	4628      	mov	r0, r5
 800836c:	47b0      	blx	r6
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	d106      	bne.n	8008382 <__sflush_r+0x66>
 8008374:	6829      	ldr	r1, [r5, #0]
 8008376:	291d      	cmp	r1, #29
 8008378:	d82c      	bhi.n	80083d4 <__sflush_r+0xb8>
 800837a:	4a2a      	ldr	r2, [pc, #168]	; (8008424 <__sflush_r+0x108>)
 800837c:	40ca      	lsrs	r2, r1
 800837e:	07d6      	lsls	r6, r2, #31
 8008380:	d528      	bpl.n	80083d4 <__sflush_r+0xb8>
 8008382:	2200      	movs	r2, #0
 8008384:	6062      	str	r2, [r4, #4]
 8008386:	04d9      	lsls	r1, r3, #19
 8008388:	6922      	ldr	r2, [r4, #16]
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	d504      	bpl.n	8008398 <__sflush_r+0x7c>
 800838e:	1c42      	adds	r2, r0, #1
 8008390:	d101      	bne.n	8008396 <__sflush_r+0x7a>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	b903      	cbnz	r3, 8008398 <__sflush_r+0x7c>
 8008396:	6560      	str	r0, [r4, #84]	; 0x54
 8008398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800839a:	602f      	str	r7, [r5, #0]
 800839c:	2900      	cmp	r1, #0
 800839e:	d0ca      	beq.n	8008336 <__sflush_r+0x1a>
 80083a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083a4:	4299      	cmp	r1, r3
 80083a6:	d002      	beq.n	80083ae <__sflush_r+0x92>
 80083a8:	4628      	mov	r0, r5
 80083aa:	f7ff fb11 	bl	80079d0 <_free_r>
 80083ae:	2000      	movs	r0, #0
 80083b0:	6360      	str	r0, [r4, #52]	; 0x34
 80083b2:	e7c1      	b.n	8008338 <__sflush_r+0x1c>
 80083b4:	6a21      	ldr	r1, [r4, #32]
 80083b6:	2301      	movs	r3, #1
 80083b8:	4628      	mov	r0, r5
 80083ba:	47b0      	blx	r6
 80083bc:	1c41      	adds	r1, r0, #1
 80083be:	d1c7      	bne.n	8008350 <__sflush_r+0x34>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0c4      	beq.n	8008350 <__sflush_r+0x34>
 80083c6:	2b1d      	cmp	r3, #29
 80083c8:	d001      	beq.n	80083ce <__sflush_r+0xb2>
 80083ca:	2b16      	cmp	r3, #22
 80083cc:	d101      	bne.n	80083d2 <__sflush_r+0xb6>
 80083ce:	602f      	str	r7, [r5, #0]
 80083d0:	e7b1      	b.n	8008336 <__sflush_r+0x1a>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	e7ad      	b.n	8008338 <__sflush_r+0x1c>
 80083dc:	690f      	ldr	r7, [r1, #16]
 80083de:	2f00      	cmp	r7, #0
 80083e0:	d0a9      	beq.n	8008336 <__sflush_r+0x1a>
 80083e2:	0793      	lsls	r3, r2, #30
 80083e4:	680e      	ldr	r6, [r1, #0]
 80083e6:	bf08      	it	eq
 80083e8:	694b      	ldreq	r3, [r1, #20]
 80083ea:	600f      	str	r7, [r1, #0]
 80083ec:	bf18      	it	ne
 80083ee:	2300      	movne	r3, #0
 80083f0:	eba6 0807 	sub.w	r8, r6, r7
 80083f4:	608b      	str	r3, [r1, #8]
 80083f6:	f1b8 0f00 	cmp.w	r8, #0
 80083fa:	dd9c      	ble.n	8008336 <__sflush_r+0x1a>
 80083fc:	6a21      	ldr	r1, [r4, #32]
 80083fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008400:	4643      	mov	r3, r8
 8008402:	463a      	mov	r2, r7
 8008404:	4628      	mov	r0, r5
 8008406:	47b0      	blx	r6
 8008408:	2800      	cmp	r0, #0
 800840a:	dc06      	bgt.n	800841a <__sflush_r+0xfe>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	e78e      	b.n	8008338 <__sflush_r+0x1c>
 800841a:	4407      	add	r7, r0
 800841c:	eba8 0800 	sub.w	r8, r8, r0
 8008420:	e7e9      	b.n	80083f6 <__sflush_r+0xda>
 8008422:	bf00      	nop
 8008424:	20400001 	.word	0x20400001

08008428 <_fflush_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	690b      	ldr	r3, [r1, #16]
 800842c:	4605      	mov	r5, r0
 800842e:	460c      	mov	r4, r1
 8008430:	b913      	cbnz	r3, 8008438 <_fflush_r+0x10>
 8008432:	2500      	movs	r5, #0
 8008434:	4628      	mov	r0, r5
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	b118      	cbz	r0, 8008442 <_fflush_r+0x1a>
 800843a:	6983      	ldr	r3, [r0, #24]
 800843c:	b90b      	cbnz	r3, 8008442 <_fflush_r+0x1a>
 800843e:	f000 f887 	bl	8008550 <__sinit>
 8008442:	4b14      	ldr	r3, [pc, #80]	; (8008494 <_fflush_r+0x6c>)
 8008444:	429c      	cmp	r4, r3
 8008446:	d11b      	bne.n	8008480 <_fflush_r+0x58>
 8008448:	686c      	ldr	r4, [r5, #4]
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0ef      	beq.n	8008432 <_fflush_r+0xa>
 8008452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008454:	07d0      	lsls	r0, r2, #31
 8008456:	d404      	bmi.n	8008462 <_fflush_r+0x3a>
 8008458:	0599      	lsls	r1, r3, #22
 800845a:	d402      	bmi.n	8008462 <_fflush_r+0x3a>
 800845c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845e:	f000 f915 	bl	800868c <__retarget_lock_acquire_recursive>
 8008462:	4628      	mov	r0, r5
 8008464:	4621      	mov	r1, r4
 8008466:	f7ff ff59 	bl	800831c <__sflush_r>
 800846a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800846c:	07da      	lsls	r2, r3, #31
 800846e:	4605      	mov	r5, r0
 8008470:	d4e0      	bmi.n	8008434 <_fflush_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	059b      	lsls	r3, r3, #22
 8008476:	d4dd      	bmi.n	8008434 <_fflush_r+0xc>
 8008478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847a:	f000 f908 	bl	800868e <__retarget_lock_release_recursive>
 800847e:	e7d9      	b.n	8008434 <_fflush_r+0xc>
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <_fflush_r+0x70>)
 8008482:	429c      	cmp	r4, r3
 8008484:	d101      	bne.n	800848a <_fflush_r+0x62>
 8008486:	68ac      	ldr	r4, [r5, #8]
 8008488:	e7df      	b.n	800844a <_fflush_r+0x22>
 800848a:	4b04      	ldr	r3, [pc, #16]	; (800849c <_fflush_r+0x74>)
 800848c:	429c      	cmp	r4, r3
 800848e:	bf08      	it	eq
 8008490:	68ec      	ldreq	r4, [r5, #12]
 8008492:	e7da      	b.n	800844a <_fflush_r+0x22>
 8008494:	08008bac 	.word	0x08008bac
 8008498:	08008bcc 	.word	0x08008bcc
 800849c:	08008b8c 	.word	0x08008b8c

080084a0 <std>:
 80084a0:	2300      	movs	r3, #0
 80084a2:	b510      	push	{r4, lr}
 80084a4:	4604      	mov	r4, r0
 80084a6:	e9c0 3300 	strd	r3, r3, [r0]
 80084aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ae:	6083      	str	r3, [r0, #8]
 80084b0:	8181      	strh	r1, [r0, #12]
 80084b2:	6643      	str	r3, [r0, #100]	; 0x64
 80084b4:	81c2      	strh	r2, [r0, #14]
 80084b6:	6183      	str	r3, [r0, #24]
 80084b8:	4619      	mov	r1, r3
 80084ba:	2208      	movs	r2, #8
 80084bc:	305c      	adds	r0, #92	; 0x5c
 80084be:	f7ff f9af 	bl	8007820 <memset>
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <std+0x38>)
 80084c4:	6263      	str	r3, [r4, #36]	; 0x24
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <std+0x3c>)
 80084c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084ca:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <std+0x40>)
 80084cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <std+0x44>)
 80084d0:	6224      	str	r4, [r4, #32]
 80084d2:	6323      	str	r3, [r4, #48]	; 0x30
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	bf00      	nop
 80084d8:	080087fd 	.word	0x080087fd
 80084dc:	0800881f 	.word	0x0800881f
 80084e0:	08008857 	.word	0x08008857
 80084e4:	0800887b 	.word	0x0800887b

080084e8 <_cleanup_r>:
 80084e8:	4901      	ldr	r1, [pc, #4]	; (80084f0 <_cleanup_r+0x8>)
 80084ea:	f000 b8af 	b.w	800864c <_fwalk_reent>
 80084ee:	bf00      	nop
 80084f0:	08008429 	.word	0x08008429

080084f4 <__sfmoreglue>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	2268      	movs	r2, #104	; 0x68
 80084f8:	1e4d      	subs	r5, r1, #1
 80084fa:	4355      	muls	r5, r2
 80084fc:	460e      	mov	r6, r1
 80084fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008502:	f7ff fad1 	bl	8007aa8 <_malloc_r>
 8008506:	4604      	mov	r4, r0
 8008508:	b140      	cbz	r0, 800851c <__sfmoreglue+0x28>
 800850a:	2100      	movs	r1, #0
 800850c:	e9c0 1600 	strd	r1, r6, [r0]
 8008510:	300c      	adds	r0, #12
 8008512:	60a0      	str	r0, [r4, #8]
 8008514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008518:	f7ff f982 	bl	8007820 <memset>
 800851c:	4620      	mov	r0, r4
 800851e:	bd70      	pop	{r4, r5, r6, pc}

08008520 <__sfp_lock_acquire>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__sfp_lock_acquire+0x8>)
 8008522:	f000 b8b3 	b.w	800868c <__retarget_lock_acquire_recursive>
 8008526:	bf00      	nop
 8008528:	200048c1 	.word	0x200048c1

0800852c <__sfp_lock_release>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__sfp_lock_release+0x8>)
 800852e:	f000 b8ae 	b.w	800868e <__retarget_lock_release_recursive>
 8008532:	bf00      	nop
 8008534:	200048c1 	.word	0x200048c1

08008538 <__sinit_lock_acquire>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__sinit_lock_acquire+0x8>)
 800853a:	f000 b8a7 	b.w	800868c <__retarget_lock_acquire_recursive>
 800853e:	bf00      	nop
 8008540:	200048c2 	.word	0x200048c2

08008544 <__sinit_lock_release>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__sinit_lock_release+0x8>)
 8008546:	f000 b8a2 	b.w	800868e <__retarget_lock_release_recursive>
 800854a:	bf00      	nop
 800854c:	200048c2 	.word	0x200048c2

08008550 <__sinit>:
 8008550:	b510      	push	{r4, lr}
 8008552:	4604      	mov	r4, r0
 8008554:	f7ff fff0 	bl	8008538 <__sinit_lock_acquire>
 8008558:	69a3      	ldr	r3, [r4, #24]
 800855a:	b11b      	cbz	r3, 8008564 <__sinit+0x14>
 800855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008560:	f7ff bff0 	b.w	8008544 <__sinit_lock_release>
 8008564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008568:	6523      	str	r3, [r4, #80]	; 0x50
 800856a:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <__sinit+0x68>)
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <__sinit+0x6c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	62a2      	str	r2, [r4, #40]	; 0x28
 8008572:	42a3      	cmp	r3, r4
 8008574:	bf04      	itt	eq
 8008576:	2301      	moveq	r3, #1
 8008578:	61a3      	streq	r3, [r4, #24]
 800857a:	4620      	mov	r0, r4
 800857c:	f000 f820 	bl	80085c0 <__sfp>
 8008580:	6060      	str	r0, [r4, #4]
 8008582:	4620      	mov	r0, r4
 8008584:	f000 f81c 	bl	80085c0 <__sfp>
 8008588:	60a0      	str	r0, [r4, #8]
 800858a:	4620      	mov	r0, r4
 800858c:	f000 f818 	bl	80085c0 <__sfp>
 8008590:	2200      	movs	r2, #0
 8008592:	60e0      	str	r0, [r4, #12]
 8008594:	2104      	movs	r1, #4
 8008596:	6860      	ldr	r0, [r4, #4]
 8008598:	f7ff ff82 	bl	80084a0 <std>
 800859c:	68a0      	ldr	r0, [r4, #8]
 800859e:	2201      	movs	r2, #1
 80085a0:	2109      	movs	r1, #9
 80085a2:	f7ff ff7d 	bl	80084a0 <std>
 80085a6:	68e0      	ldr	r0, [r4, #12]
 80085a8:	2202      	movs	r2, #2
 80085aa:	2112      	movs	r1, #18
 80085ac:	f7ff ff78 	bl	80084a0 <std>
 80085b0:	2301      	movs	r3, #1
 80085b2:	61a3      	str	r3, [r4, #24]
 80085b4:	e7d2      	b.n	800855c <__sinit+0xc>
 80085b6:	bf00      	nop
 80085b8:	08008a80 	.word	0x08008a80
 80085bc:	080084e9 	.word	0x080084e9

080085c0 <__sfp>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	4607      	mov	r7, r0
 80085c4:	f7ff ffac 	bl	8008520 <__sfp_lock_acquire>
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <__sfp+0x84>)
 80085ca:	681e      	ldr	r6, [r3, #0]
 80085cc:	69b3      	ldr	r3, [r6, #24]
 80085ce:	b913      	cbnz	r3, 80085d6 <__sfp+0x16>
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff ffbd 	bl	8008550 <__sinit>
 80085d6:	3648      	adds	r6, #72	; 0x48
 80085d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085dc:	3b01      	subs	r3, #1
 80085de:	d503      	bpl.n	80085e8 <__sfp+0x28>
 80085e0:	6833      	ldr	r3, [r6, #0]
 80085e2:	b30b      	cbz	r3, 8008628 <__sfp+0x68>
 80085e4:	6836      	ldr	r6, [r6, #0]
 80085e6:	e7f7      	b.n	80085d8 <__sfp+0x18>
 80085e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085ec:	b9d5      	cbnz	r5, 8008624 <__sfp+0x64>
 80085ee:	4b16      	ldr	r3, [pc, #88]	; (8008648 <__sfp+0x88>)
 80085f0:	60e3      	str	r3, [r4, #12]
 80085f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085f6:	6665      	str	r5, [r4, #100]	; 0x64
 80085f8:	f000 f847 	bl	800868a <__retarget_lock_init_recursive>
 80085fc:	f7ff ff96 	bl	800852c <__sfp_lock_release>
 8008600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008608:	6025      	str	r5, [r4, #0]
 800860a:	61a5      	str	r5, [r4, #24]
 800860c:	2208      	movs	r2, #8
 800860e:	4629      	mov	r1, r5
 8008610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008614:	f7ff f904 	bl	8007820 <memset>
 8008618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800861c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008620:	4620      	mov	r0, r4
 8008622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008624:	3468      	adds	r4, #104	; 0x68
 8008626:	e7d9      	b.n	80085dc <__sfp+0x1c>
 8008628:	2104      	movs	r1, #4
 800862a:	4638      	mov	r0, r7
 800862c:	f7ff ff62 	bl	80084f4 <__sfmoreglue>
 8008630:	4604      	mov	r4, r0
 8008632:	6030      	str	r0, [r6, #0]
 8008634:	2800      	cmp	r0, #0
 8008636:	d1d5      	bne.n	80085e4 <__sfp+0x24>
 8008638:	f7ff ff78 	bl	800852c <__sfp_lock_release>
 800863c:	230c      	movs	r3, #12
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	e7ee      	b.n	8008620 <__sfp+0x60>
 8008642:	bf00      	nop
 8008644:	08008a80 	.word	0x08008a80
 8008648:	ffff0001 	.word	0xffff0001

0800864c <_fwalk_reent>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	4606      	mov	r6, r0
 8008652:	4688      	mov	r8, r1
 8008654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008658:	2700      	movs	r7, #0
 800865a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800865e:	f1b9 0901 	subs.w	r9, r9, #1
 8008662:	d505      	bpl.n	8008670 <_fwalk_reent+0x24>
 8008664:	6824      	ldr	r4, [r4, #0]
 8008666:	2c00      	cmp	r4, #0
 8008668:	d1f7      	bne.n	800865a <_fwalk_reent+0xe>
 800866a:	4638      	mov	r0, r7
 800866c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008670:	89ab      	ldrh	r3, [r5, #12]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d907      	bls.n	8008686 <_fwalk_reent+0x3a>
 8008676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800867a:	3301      	adds	r3, #1
 800867c:	d003      	beq.n	8008686 <_fwalk_reent+0x3a>
 800867e:	4629      	mov	r1, r5
 8008680:	4630      	mov	r0, r6
 8008682:	47c0      	blx	r8
 8008684:	4307      	orrs	r7, r0
 8008686:	3568      	adds	r5, #104	; 0x68
 8008688:	e7e9      	b.n	800865e <_fwalk_reent+0x12>

0800868a <__retarget_lock_init_recursive>:
 800868a:	4770      	bx	lr

0800868c <__retarget_lock_acquire_recursive>:
 800868c:	4770      	bx	lr

0800868e <__retarget_lock_release_recursive>:
 800868e:	4770      	bx	lr

08008690 <__swhatbuf_r>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	460e      	mov	r6, r1
 8008694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008698:	2900      	cmp	r1, #0
 800869a:	b096      	sub	sp, #88	; 0x58
 800869c:	4614      	mov	r4, r2
 800869e:	461d      	mov	r5, r3
 80086a0:	da08      	bge.n	80086b4 <__swhatbuf_r+0x24>
 80086a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	602a      	str	r2, [r5, #0]
 80086aa:	061a      	lsls	r2, r3, #24
 80086ac:	d410      	bmi.n	80086d0 <__swhatbuf_r+0x40>
 80086ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086b2:	e00e      	b.n	80086d2 <__swhatbuf_r+0x42>
 80086b4:	466a      	mov	r2, sp
 80086b6:	f000 f907 	bl	80088c8 <_fstat_r>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	dbf1      	blt.n	80086a2 <__swhatbuf_r+0x12>
 80086be:	9a01      	ldr	r2, [sp, #4]
 80086c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086c8:	425a      	negs	r2, r3
 80086ca:	415a      	adcs	r2, r3
 80086cc:	602a      	str	r2, [r5, #0]
 80086ce:	e7ee      	b.n	80086ae <__swhatbuf_r+0x1e>
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	2000      	movs	r0, #0
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	b016      	add	sp, #88	; 0x58
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080086dc <__smakebuf_r>:
 80086dc:	898b      	ldrh	r3, [r1, #12]
 80086de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086e0:	079d      	lsls	r5, r3, #30
 80086e2:	4606      	mov	r6, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	d507      	bpl.n	80086f8 <__smakebuf_r+0x1c>
 80086e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	2301      	movs	r3, #1
 80086f2:	6163      	str	r3, [r4, #20]
 80086f4:	b002      	add	sp, #8
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	ab01      	add	r3, sp, #4
 80086fa:	466a      	mov	r2, sp
 80086fc:	f7ff ffc8 	bl	8008690 <__swhatbuf_r>
 8008700:	9900      	ldr	r1, [sp, #0]
 8008702:	4605      	mov	r5, r0
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff f9cf 	bl	8007aa8 <_malloc_r>
 800870a:	b948      	cbnz	r0, 8008720 <__smakebuf_r+0x44>
 800870c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008710:	059a      	lsls	r2, r3, #22
 8008712:	d4ef      	bmi.n	80086f4 <__smakebuf_r+0x18>
 8008714:	f023 0303 	bic.w	r3, r3, #3
 8008718:	f043 0302 	orr.w	r3, r3, #2
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	e7e3      	b.n	80086e8 <__smakebuf_r+0xc>
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <__smakebuf_r+0x7c>)
 8008722:	62b3      	str	r3, [r6, #40]	; 0x28
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	6020      	str	r0, [r4, #0]
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	6163      	str	r3, [r4, #20]
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	6120      	str	r0, [r4, #16]
 8008736:	b15b      	cbz	r3, 8008750 <__smakebuf_r+0x74>
 8008738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800873c:	4630      	mov	r0, r6
 800873e:	f000 f8d5 	bl	80088ec <_isatty_r>
 8008742:	b128      	cbz	r0, 8008750 <__smakebuf_r+0x74>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	f043 0301 	orr.w	r3, r3, #1
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	89a0      	ldrh	r0, [r4, #12]
 8008752:	4305      	orrs	r5, r0
 8008754:	81a5      	strh	r5, [r4, #12]
 8008756:	e7cd      	b.n	80086f4 <__smakebuf_r+0x18>
 8008758:	080084e9 	.word	0x080084e9

0800875c <__malloc_lock>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__malloc_lock+0x8>)
 800875e:	f7ff bf95 	b.w	800868c <__retarget_lock_acquire_recursive>
 8008762:	bf00      	nop
 8008764:	200048c0 	.word	0x200048c0

08008768 <__malloc_unlock>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__malloc_unlock+0x8>)
 800876a:	f7ff bf90 	b.w	800868e <__retarget_lock_release_recursive>
 800876e:	bf00      	nop
 8008770:	200048c0 	.word	0x200048c0

08008774 <_raise_r>:
 8008774:	291f      	cmp	r1, #31
 8008776:	b538      	push	{r3, r4, r5, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	460d      	mov	r5, r1
 800877c:	d904      	bls.n	8008788 <_raise_r+0x14>
 800877e:	2316      	movs	r3, #22
 8008780:	6003      	str	r3, [r0, #0]
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800878a:	b112      	cbz	r2, 8008792 <_raise_r+0x1e>
 800878c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008790:	b94b      	cbnz	r3, 80087a6 <_raise_r+0x32>
 8008792:	4620      	mov	r0, r4
 8008794:	f000 f830 	bl	80087f8 <_getpid_r>
 8008798:	462a      	mov	r2, r5
 800879a:	4601      	mov	r1, r0
 800879c:	4620      	mov	r0, r4
 800879e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087a2:	f000 b817 	b.w	80087d4 <_kill_r>
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d00a      	beq.n	80087c0 <_raise_r+0x4c>
 80087aa:	1c59      	adds	r1, r3, #1
 80087ac:	d103      	bne.n	80087b6 <_raise_r+0x42>
 80087ae:	2316      	movs	r3, #22
 80087b0:	6003      	str	r3, [r0, #0]
 80087b2:	2001      	movs	r0, #1
 80087b4:	e7e7      	b.n	8008786 <_raise_r+0x12>
 80087b6:	2400      	movs	r4, #0
 80087b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087bc:	4628      	mov	r0, r5
 80087be:	4798      	blx	r3
 80087c0:	2000      	movs	r0, #0
 80087c2:	e7e0      	b.n	8008786 <_raise_r+0x12>

080087c4 <raise>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <raise+0xc>)
 80087c6:	4601      	mov	r1, r0
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f7ff bfd3 	b.w	8008774 <_raise_r>
 80087ce:	bf00      	nop
 80087d0:	20000010 	.word	0x20000010

080087d4 <_kill_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_kill_r+0x20>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	f7f8 fea1 	bl	8001528 <_kill>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d102      	bne.n	80087f0 <_kill_r+0x1c>
 80087ea:	682b      	ldr	r3, [r5, #0]
 80087ec:	b103      	cbz	r3, 80087f0 <_kill_r+0x1c>
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	200048c4 	.word	0x200048c4

080087f8 <_getpid_r>:
 80087f8:	f7f8 be8e 	b.w	8001518 <_getpid>

080087fc <__sread>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	f000 f894 	bl	8008930 <_read_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	bfab      	itete	ge
 800880c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800880e:	89a3      	ldrhlt	r3, [r4, #12]
 8008810:	181b      	addge	r3, r3, r0
 8008812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008816:	bfac      	ite	ge
 8008818:	6563      	strge	r3, [r4, #84]	; 0x54
 800881a:	81a3      	strhlt	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__swrite>:
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	461f      	mov	r7, r3
 8008824:	898b      	ldrh	r3, [r1, #12]
 8008826:	05db      	lsls	r3, r3, #23
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4616      	mov	r6, r2
 800882e:	d505      	bpl.n	800883c <__swrite+0x1e>
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	2302      	movs	r3, #2
 8008836:	2200      	movs	r2, #0
 8008838:	f000 f868 	bl	800890c <_lseek_r>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	4628      	mov	r0, r5
 800884e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	f000 b817 	b.w	8008884 <_write_r>

08008856 <__sseek>:
 8008856:	b510      	push	{r4, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 f855 	bl	800890c <_lseek_r>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	bf15      	itete	ne
 8008868:	6560      	strne	r0, [r4, #84]	; 0x54
 800886a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800886e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008872:	81a3      	strheq	r3, [r4, #12]
 8008874:	bf18      	it	ne
 8008876:	81a3      	strhne	r3, [r4, #12]
 8008878:	bd10      	pop	{r4, pc}

0800887a <__sclose>:
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 b813 	b.w	80088a8 <_close_r>
	...

08008884 <_write_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d07      	ldr	r5, [pc, #28]	; (80088a4 <_write_r+0x20>)
 8008888:	4604      	mov	r4, r0
 800888a:	4608      	mov	r0, r1
 800888c:	4611      	mov	r1, r2
 800888e:	2200      	movs	r2, #0
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f7f8 fe7f 	bl	8001596 <_write>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_write_r+0x1e>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_write_r+0x1e>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	200048c4 	.word	0x200048c4

080088a8 <_close_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d06      	ldr	r5, [pc, #24]	; (80088c4 <_close_r+0x1c>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7f8 fe8b 	bl	80015ce <_close>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_close_r+0x1a>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_close_r+0x1a>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	200048c4 	.word	0x200048c4

080088c8 <_fstat_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d07      	ldr	r5, [pc, #28]	; (80088e8 <_fstat_r+0x20>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	f7f8 fe86 	bl	80015e6 <_fstat>
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	d102      	bne.n	80088e4 <_fstat_r+0x1c>
 80088de:	682b      	ldr	r3, [r5, #0]
 80088e0:	b103      	cbz	r3, 80088e4 <_fstat_r+0x1c>
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	bd38      	pop	{r3, r4, r5, pc}
 80088e6:	bf00      	nop
 80088e8:	200048c4 	.word	0x200048c4

080088ec <_isatty_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d06      	ldr	r5, [pc, #24]	; (8008908 <_isatty_r+0x1c>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	f7f8 fe85 	bl	8001606 <_isatty>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_isatty_r+0x1a>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_isatty_r+0x1a>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	200048c4 	.word	0x200048c4

0800890c <_lseek_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	; (800892c <_lseek_r+0x20>)
 8008910:	4604      	mov	r4, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f8 fe7e 	bl	800161c <_lseek>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_lseek_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_lseek_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	200048c4 	.word	0x200048c4

08008930 <_read_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d07      	ldr	r5, [pc, #28]	; (8008950 <_read_r+0x20>)
 8008934:	4604      	mov	r4, r0
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	2200      	movs	r2, #0
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	f7f8 fe0c 	bl	800155c <_read>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_read_r+0x1e>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_read_r+0x1e>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	200048c4 	.word	0x200048c4

08008954 <_init>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr

08008960 <_fini>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr
